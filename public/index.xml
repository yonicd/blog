<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reproducible Random Thoughts</title>
    <link>/</link>
    <description>Recent content on Reproducible Random Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>yonicd@gmail.com (Jonathan Sidi)</managingEditor>
    <webMaster>yonicd@gmail.com (Jonathan Sidi)</webMaster>
    <lastBuildDate>Thu, 19 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jsTree</title>
      <link>/post/jstree/</link>
      <pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/jstree/</guid>
      <description>jsTree is a R package that is a standalone htmlwidget for the jsTree JavaScript library. It can be run from the R console directly into the Rstudio Viewer, be used in a Shiny application or be part of an Rmarkdown html output.
Installation #CRAN install.packages(&amp;#39;jsTree&amp;#39;) #Github devtools::install_github(&amp;#39;metrumresearchgroup/jsTree&amp;#39;) The motivation for the package came from the shinyTree by Jeff Allen, which has an early version of the JavaScript library hardcoded into a Shiny application.</description>
    </item>
    
    <item>
      <title>Combining Github Traffic Plots Across Repositories</title>
      <link>/post/2017-10-02-githubtraffic/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-10-02-githubtraffic/</guid>
      <description>This post will show how to use the RSelenium package to scrape your own github account to retrieve all that fun traffic data of clones and visits and create a single traffic plot for your account.
For the single file you can find it in this gist file.
Packages library(RSelenium) library(XML) library(ggplot2) library(reshape2) library(plyr) library(dplyr)  Fill in the relevant information for your account. The team is usually your username, but it can be different.</description>
    </item>
    
    <item>
      <title>Regular Expression Searching within Shiny Selectize Objects</title>
      <link>/post/2017-09-26-regexselect/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-09-26-regexselect/</guid>
      <description>regexSelect is a small package that uses Shiny modules to solve a problem in Shiny selectize objects - regular expression (regex) searching. You can quickly filter the values in the selectize object, while being able to add that new regex query to the selectize list.
This is great for long lists, since you can return multiple item simultaneously without needing to endlessly click items in a list!
Install install.packages(&#39;regexSelect&#39;) #devtools::install_github(&#39;yonicd/regexSelect&#39;)  Below are two examples of using regular expressions to quickly populate multiple items in a ggplot and a datatable.</description>
    </item>
    
    <item>
      <title>What is the appropriate population scaling of the Affordable Care Act Funding?</title>
      <link>/post/2017-09-26-aca/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-09-26-aca/</guid>
      <description>I have been trying to decipher for myself, what is in the current (well, yesterday&amp;rsquo;s) Graham-Cassidy health care bill. I saw this image on many news outlets a few days ago and my inner hate for pie charts bubbled up.
This is a zoom in on the pie chart &amp;hellip; From what I can gather, these figures are attempting to say that there are specific states that are getting relatively more of the federal health care funds under the Afordable Care Act (ACA) than their relative state population.</description>
    </item>
    
    <item>
      <title>Automating roxygen2 package documentation</title>
      <link>/post/2017-09-18-sinew/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-09-18-sinew/</guid>
      <description>Thinking of creating a new package? Dread the task of function documentation? Afraid to run devtools::check(build_args = &#39;--as-cran&#39;) and get bombarded by Errors, Warnings, and Notes (oh my!) ? Wait&amp;hellip;. breathe!
After feeling all that anxiety and following all of Hadley&amp;rsquo;s directions online, I felt I was doing a lot of manual labour, and that a package should be doing all lot of this for me. So we wrote one - sinew (sin-yu).</description>
    </item>
    
    <item>
      <title>sinew</title>
      <link>/post/2017-05-03-sinew/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-05-03-sinew/</guid>
      <description>Sinew is a R package that generates a Roxygen skeleton populated with information scraped from the function script.
Functionality  makeOxygen: Create skeleton for Roxygen2 documentation populated with information scraped from within the package function scripts. makeImport: Create import calls for DESCRIPTION, NAMESPACE and Roxygen2 makeDictionary: Create an R file of all the unique roxygen parameter fields in a package R subdirectory.  makeOxygen Function that returns the skeleton for roxygen2 documentation including title, description, return, import and other fields populated with information scraped from the function script.</description>
    </item>
    
    <item>
      <title>slickR</title>
      <link>/post/2017-04-07-slickr/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-04-07-slickr/</guid>
      <description>We are happy to bring the slick JavaScript library to R. It is self described as &amp;ldquo;the last carousel you&amp;rsquo;ll ever need&amp;rdquo;. This carousel is based on putting the elements of the carousel in a div HTML tag. This makes the carousel very versatile in what can be placed inside. Regular objects that are placed in a carousel can be for example: images, plots, tables, gifs, videos, iframes and even htmlwidgets.</description>
    </item>
    
    <item>
      <title>ggedit 0.2.0</title>
      <link>/post/2017-03-31-ggedit_cranpost/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-03-31-ggedit_cranpost/</guid>
      <description>We are pleased to announce the release of the ggedit package on CRAN.
To install the package you can call the standard R command
install.packages(&#39;ggedit&#39;)  The source version is still tracked on github, which has been reorganized to be easier to navigate.
To install the dev version:
devtools::install_github(&#39;metrumresearchgroup/ggedit&#39;)  What is ggedit? ggedit is an R package that is used to facilitate ggplot formatting. With ggedit, R users of all experience levels can easily move from creating ggplots to refining aesthetic details, all while maintaining portability for further reproducible research and collaboration.</description>
    </item>
    
    <item>
      <title>ggedit 0.1.1</title>
      <link>/post/2017-02-22-ggedit3/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-02-22-ggedit3/</guid>
      <description>ggedit is a package that lets users interactively edit ggplot layer and theme aesthetics. In a previous post we showed you how to use it in a collaborative workflow using standard R scripts. More importantly, we highlighted that ggedit outputs to the user, after editing, updated: gg plots, layers, scales and themes as both self-contained objects and script that you can paste directly in your code.
Installation devtools::install_github(&amp;quot;metrumresearchgroup/ggedit&amp;quot;,subdir=&amp;quot;ggedit&amp;quot;)  version 0.</description>
    </item>
    
    <item>
      <title>ggedit</title>
      <link>/post/2016-12-13-ggedit/</link>
      <pubDate>Tue, 13 Dec 2016 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2016-12-13-ggedit/</guid>
      <description>ggplot2 has become the standard of plotting in R for many users. New users, however, may find the learning curve steep at first, and more experienced users may find it challenging to keep track of all the options (especially in the theme!).
ggedit is a package that helps users bridge the gap between making a plot and getting all of those pesky plot aesthetics just right, all while keeping everything portable for further research and collaboration.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/page/about/</guid>
      <description>Currently a graduate student at the Department of Statistics in the Hebrew University of Jerusalem (HUJI) and research associate at Metrum Research Group. Previously worked as statistician in the Research Department of the Bank of Israel, Matrix and a consultant to the Van Leer Jerusalem Institute.
 Obtained a BA in Economics and Statistics and an MA in Statistics from HUJI (Supervised by Ya&amp;rsquo;acov Ritov). My masters thesis dissertation involved creating a nowcasting model for the Gross Domestic Product of Israel via regularized regression models during my time as a research student in the Bank of Israel.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/page/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/page/projects/</guid>
      <description>This is a list of R packages that have been published on CRAN and/or are still being developed on Github. Many of the projects are part of open tools developed at Metrum Research Group.
The icons at the end of each description show where the project is maintained and links are attached to each one to take you to the relevant page.
   Metrum Github CRAN bl.ocks            (Not in any logical order, just what came to mind when I wrote this&amp;hellip;)</description>
    </item>
    
  </channel>
</rss>