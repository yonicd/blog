<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reproducibility on Reproducible Random Thoughts</title>
    <link>/tags/reproducibility/</link>
    <description>Recent content in Reproducibility on Reproducible Random Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>yonicd@gmail.com (Jonathan Sidi)</managingEditor>
    <webMaster>yonicd@gmail.com (Jonathan Sidi)</webMaster>
    <lastBuildDate>Mon, 29 Oct 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/reproducibility/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>carbonate</title>
      <link>/post/carbonate/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/carbonate/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://carbon.now.sh/about&#34;&gt;carbon.js&lt;/a&gt; is the easiest way to create beautiful images of your source code, and &lt;a href=&#34;https://yonicd.github.io/carbonate/&#34;&gt;carbonate&lt;/a&gt; creates an api in &lt;code&gt;R&lt;/code&gt; to interact with it. The package gives a new simple way to share your script with the rest of the &lt;code&gt;R&lt;/code&gt; community on posters, slides, Shiny apps and social media!&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
This little snippet combines SO MANY of my favorite &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; üì¶s:&lt;br&gt;‚ú® &lt;a href=&#34;https://twitter.com/jimhester_?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@jimhester_&lt;/span&gt;&lt;/a&gt;&#39;s glue&lt;br&gt;ü•õ &lt;a href=&#34;https://twitter.com/yoniceedee?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@yoniceedee&lt;/span&gt;&lt;/a&gt;&#39;s carbonate&lt;br&gt;üê¶ &lt;a href=&#34;https://twitter.com/kearneymw?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@kearneymw&lt;/span&gt;&lt;/a&gt;&#39;s rtweet&lt;br&gt;üòé &lt;a href=&#34;https://twitter.com/hadleywickham?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@hadleywickham&lt;/span&gt;&lt;/a&gt;&#39;s emo&lt;br&gt;üìç &lt;a href=&#34;https://twitter.com/krlmlr?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@krlmlr&lt;/span&gt;&lt;/a&gt;&#39;s here &lt;a href=&#34;https://t.co/ploHThYu82&#34;&gt;https://t.co/ploHThYu82&lt;/a&gt;
&lt;/p&gt;
‚Äî ùìõùìæùì¨ùîÇ::maternity_leaveü§± (&lt;span class=&#34;citation&#34;&gt;@LucyStats&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/LucyStats/status/1034972003130851328?ref_src=twsrc%5Etfw&#34;&gt;August 30, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#remotes::install_github(&amp;#39;yonicd/carbonate&amp;#39;)
install.packages(&amp;#39;carbonate&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;usage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;div id=&#34;initialize-new-carbon-object&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Initialize new carbon object&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(carbonate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default code in the carbon object is taken from the clipboard.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- carbon$new()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But can also be defined inline. Code can be a character object of any length.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- carbon$new(readLines(&amp;#39;DESCRIPTION&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is kept in the object and can be changed at any time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$code&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Package: carbonate&amp;quot;                                                                                 
##  [2] &amp;quot;Title: Interact with &amp;#39;carbon.js&amp;#39;&amp;quot;                                                                   
##  [3] &amp;quot;Version: 0.1.2&amp;quot;                                                                                     
##  [4] &amp;quot;Authors@R: person(given  = \&amp;quot;Jonathan\&amp;quot;,&amp;quot;                                                           
##  [5] &amp;quot;                 family  = \&amp;quot;Sidi\&amp;quot;,&amp;quot;                                                               
##  [6] &amp;quot;                 email   = \&amp;quot;yonicd@gmail.com\&amp;quot;,&amp;quot;                                                   
##  [7] &amp;quot;                 role    = c(\&amp;quot;aut\&amp;quot;, \&amp;quot;cre\&amp;quot;),&amp;quot;                                                    
##  [8] &amp;quot;                 comment = c(ORCID = \&amp;quot;0000-0002-4222-1819\&amp;quot;))&amp;quot;                                     
##  [9] &amp;quot;Description: Create beautiful images of source code using &amp;#39;carbon.js&amp;#39;&amp;lt;https://carbon.now.sh/about&amp;gt;.&amp;quot;
## [10] &amp;quot;Depends: R (&amp;gt;= 3.2.0)&amp;quot;                                                                              
## [11] &amp;quot;License: MIT + file LICENSE&amp;quot;                                                                        
## [12] &amp;quot;Encoding: UTF-8&amp;quot;                                                                                    
## [13] &amp;quot;LazyData: true&amp;quot;                                                                                     
## [14] &amp;quot;RoxygenNote: 6.1.1&amp;quot;                                                                                 
## [15] &amp;quot;Imports: R6, clipr, magick, wdman, RSelenium, utils, httr, rtweet, yaml&amp;quot;                            
## [16] &amp;quot;Suggests: testthat, covr, knitr, rmarkdown&amp;quot;                                                         
## [17] &amp;quot;URL: https://github.com/yonicd/carbonate&amp;quot;                                                           
## [18] &amp;quot;BugReports: https://github.com/yonicd/carbonate/issues&amp;quot;                                             
## [19] &amp;quot;Roxygen: list(markdown = TRUE)&amp;quot;                                                                     
## [20] &amp;quot;VignetteBuilder: knitr&amp;quot;                                                                             
## [21] &amp;quot;Author: Jonathan Sidi [aut, cre] (&amp;lt;https://orcid.org/0000-0002-4222-1819&amp;gt;)&amp;quot;                         
## [22] &amp;quot;Maintainer: Jonathan Sidi &amp;lt;yonicd@gmail.com&amp;gt;&amp;quot;                                                       
## [23] &amp;quot;Built: R 3.5.1; ; 2019-02-13 01:22:25 UTC; unix&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main job of the package is to convert all the options set by the user into a URI that is sent to the carbon url page, where it is processed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$uri()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://carbon.now.sh/?bg=rgba(171%2C175%2C195%2C0.7)&amp;amp;t=panda-syntax&amp;amp;wt=none&amp;amp;l=r&amp;amp;ds=true&amp;amp;dsyoff=20px&amp;amp;dsblur=68px&amp;amp;wc=true&amp;amp;wa=true&amp;amp;pv=11px&amp;amp;ph=14px&amp;amp;ln=false&amp;amp;fm=Fira%20Code&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=1x&amp;amp;wm=false&amp;amp;ts=false&amp;amp;code=Package%253A%2520carbonate%250ATitle%253A%2520Interact%2520with%2520%27carbon.js%27%250AVersion%253A%25200.1.2%250AAuthors%2540R%253A%2520person(given%2520%2520%253D%2520%2522Jonathan%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520family%2520%2520%253D%2520%2522Sidi%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520email%2520%2520%2520%253D%2520%2522yonicd%2540gmail.com%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520role%2520%2520%2520%2520%253D%2520c(%2522aut%2522%252C%2520%2522cre%2522)%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520comment%2520%253D%2520c(ORCID%2520%253D%2520%25220000-0002-4222-1819%2522))%250ADescription%253A%2520Create%2520beautiful%2520images%2520of%2520source%2520code%2520using%2520%27carbon.js%27%253Chttps%253A%252F%252Fcarbon.now.sh%252Fabout%253E.%250ADepends%253A%2520R%2520(%253E%253D%25203.2.0)%250ALicense%253A%2520MIT%2520%252B%2520file%2520LICENSE%250AEncoding%253A%2520UTF-8%250ALazyData%253A%2520true%250ARoxygenNote%253A%25206.1.1%250AImports%253A%2520R6%252C%2520clipr%252C%2520magick%252C%2520wdman%252C%2520RSelenium%252C%2520utils%252C%2520httr%252C%2520rtweet%252C%2520yaml%250ASuggests%253A%2520testthat%252C%2520covr%252C%2520knitr%252C%2520rmarkdown%250AURL%253A%2520https%253A%252F%252Fgithub.com%252Fyonicd%252Fcarbonate%250ABugReports%253A%2520https%253A%252F%252Fgithub.com%252Fyonicd%252Fcarbonate%252Fissues%250ARoxygen%253A%2520list(markdown%2520%253D%2520TRUE)%250AVignetteBuilder%253A%2520knitr%250AAuthor%253A%2520Jonathan%2520Sidi%2520%255Baut%252C%2520cre%255D%2520(%253Chttps%253A%252F%252Forcid.org%252F0000-0002-4222-1819%253E)%250AMaintainer%253A%2520Jonathan%2520Sidi%2520%253Cyonicd%2540gmail.com%253E%250ABuilt%253A%2520R%25203.5.1;%2520;%25202019-02-13%252001%253A22%253A25%2520UTC;%2520unix&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Click the &lt;a href=&#34;https://carbon.now.sh/?bg=rgba(171%2C175%2C195%2C0.7)&amp;amp;t=panda-syntax&amp;amp;wt=none&amp;amp;l=r&amp;amp;ds=true&amp;amp;dsyoff=20px&amp;amp;dsblur=68px&amp;amp;wc=true&amp;amp;wa=true&amp;amp;pv=11px&amp;amp;ph=14px&amp;amp;ln=false&amp;amp;fm=Fira%20Code&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=1x&amp;amp;wm=false&amp;amp;ts=false&amp;amp;code=Package%253A%2520carbonate%250ATitle%253A%2520Interact%2520with%2520%27carbon.js%27%250AVersion%253A%25200.1.2%250AAuthors%2540R%253A%2520person(given%2520%2520%253D%2520%2522Jonathan%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520family%2520%2520%253D%2520%2522Sidi%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520email%2520%2520%2520%253D%2520%2522yonicd%2540gmail.com%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520role%2520%2520%2520%2520%253D%2520c(%2522aut%2522%252C%2520%2522cre%2522)%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520comment%2520%253D%2520c(ORCID%2520%253D%2520%25220000-0002-4222-1819%2522))%250ADescription%253A%2520Create%2520beautiful%2520images%2520of%2520source%2520code%2520using%2520%27carbon.js%27%253Chttps%253A%252F%252Fcarbon.now.sh%252Fabout%253E.%250ADepends%253A%2520R%2520(%253E%253D%25203.2.0)%250ALicense%253A%2520MIT%2520%252B%2520file%2520LICENSE%250AEncoding%253A%2520UTF-8%250ALazyData%253A%2520true%250ARoxygenNote%253A%25206.1.1%250AImports%253A%2520R6%252C%2520clipr%252C%2520magick%252C%2520wdman%252C%2520RSelenium%252C%2520utils%252C%2520httr%252C%2520rtweet%252C%2520yaml%250ASuggests%253A%2520testthat%252C%2520covr%252C%2520knitr%252C%2520rmarkdown%250AURL%253A%2520https%253A%252F%252Fgithub.com%252Fyonicd%252Fcarbonate%250ABugReports%253A%2520https%253A%252F%252Fgithub.com%252Fyonicd%252Fcarbonate%252Fissues%250ARoxygen%253A%2520list(markdown%2520%253D%2520TRUE)%250AVignetteBuilder%253A%2520knitr%250AAuthor%253A%2520Jonathan%2520Sidi%2520%255Baut%252C%2520cre%255D%2520(%253Chttps%253A%252F%252Forcid.org%252F0000-0002-4222-1819%253E)%250AMaintainer%253A%2520Jonathan%2520Sidi%2520%253Cyonicd%2540gmail.com%253E%250ABuilt%253A%2520R%25203.5.1;%2520;%25202019-02-13%252001%253A22%253A25%2520UTC;%2520unix&#34;&gt;link&lt;/a&gt; to see the URI works.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;manipulate-the-carbon-object&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Manipulate the carbon object&lt;/h3&gt;
&lt;p&gt;What make carbon.js really nice that you can control all the aesthetics of the image.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;16%&#34; /&gt;
&lt;col width=&#34;48%&#34; /&gt;
&lt;col width=&#34;24%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Carbon Variable&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Carbonate Variable&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;l&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;language&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;language&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;bg&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;palette&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;layout pallete (vector with c(r,g,b,a)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;c(r=171,g=184,b=195,a=1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;t&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;template&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;layout template (listed in get_templates())&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;‚Äòseti‚Äô&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;wc&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add_window_control&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add/remove window controls (circles on top left corner)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;wt&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;window_control_theme&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;change window control themes (listed in get_windows_control_themes())&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;‚Äònone‚Äô&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;ds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add_drop_shadow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add/remove dropshadow&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;dsyoff&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;drop_shadow_offset_y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;shadow vertical offset (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;dsblur&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;drop_shadow_blur_radius&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;shadow blur radius (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;wa&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;auto_adjust_width&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;auto-audjust output width&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;pv&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;padding_vertical&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;vertical padding (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;ph&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;padding_horizontal&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;horizontal padding (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;ln&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add_line_number&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add/remove line numbers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;fm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;font_family&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;layout font family (listed in get_font_families())&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;‚ÄòHack‚Äô&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;fs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;font_size&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;font size (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;lh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;line_height_percent&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;relative space between lines (percent)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;133&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;si&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;square_image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;output image is square&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;es&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;relative_export_size&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image size in export relative to what is in the preview (1,2 or 4)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;wm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add_watermark&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add official carbon.js watermark&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;default&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Default&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$carbonate(file = &amp;#39;myfile.png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-29-carbonate_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;449&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;changing-the-template&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Changing the template&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$template &amp;lt;-&amp;#39;cobalt&amp;#39;
x$carbonate(file = &amp;#39;new_template.png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-29-carbonate_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;449&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;changing-the-font&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Changing the font&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$font_family &amp;lt;-&amp;#39;IBM Plex Mono&amp;#39;
x$carbonate(file = &amp;#39;new_font.png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-29-carbonate_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;449&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;sharing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sharing&lt;/h2&gt;
&lt;div id=&#34;tinyurl&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Tinyurl&lt;/h3&gt;
&lt;p&gt;You can also put a tinyurl link as a watermark on the image produced that will open to the &lt;a href=&#34;carbon.now.sh&#34;&gt;carbon.now.sh&lt;/a&gt; page that has the code in the image.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$add_tinyurl &amp;lt;- TRUE
x$carbonate(file = &amp;#39;tiny_url.png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default the watermark is placed on the bottom left corner.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-29-carbonate_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;449&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you just want the tinyurl link without the image to use in a tweet you can create it using&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$tiny()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## [1] &amp;quot;http://tinyurl.com/y7c64uyv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can put the link directly on your clipboard&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$tiny(clip = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## [1] &amp;quot;http://tinyurl.com/y7c64uyv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clipr::read_clip()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## [1] &amp;quot;http://tinyurl.com/y7c64uyv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;twitter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Twitter&lt;/h3&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
üì∞ Hot off the press! Grab a tinyurl from &lt;a href=&#34;https://twitter.com/yoniceedee?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@yoniceedee&lt;/span&gt;&lt;/a&gt;&#39;s üì¶&lt;br&gt;Sharing pretty code is easy as ü•ß&lt;br&gt;üîó &lt;a href=&#34;https://t.co/aDdvd4qqIH&#34;&gt;https://t.co/aDdvd4qqIH&lt;/a&gt; &lt;a href=&#34;https://t.co/c10cOq6VNF&#34;&gt;pic.twitter.com/c10cOq6VNF&lt;/a&gt;
&lt;/p&gt;
‚Äî We are R-Ladies (&lt;span class=&#34;citation&#34;&gt;@WeAreRLadies&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/WeAreRLadies/status/1034969993883144194?ref_src=twsrc%5Etfw&#34;&gt;August 30, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;direct&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Direct&lt;/h5&gt;
&lt;p&gt;You can also directly tweet the image. An automatic status is created with two options&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default
&lt;ul&gt;
&lt;li&gt;Created in R using the Carbonate üì¶&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;add_tinyurl &amp;lt;- TRUE&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Created in R using the Carbonate üì¶
Check out this script at üîó &lt;a href=&#34;http://tinyurl.com/y4nhdz8u&#34; class=&#34;uri&#34;&gt;http://tinyurl.com/y4nhdz8u&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Manual
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;tweet_status&lt;/code&gt; you can write your own status.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- carbonate::carbon$new()
x$tweet &amp;lt;- TRUE
x$carbonate()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;post-process-batch&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Post process (Batch)&lt;/h5&gt;
&lt;p&gt;If you have images stored in &lt;code&gt;x$carbons&lt;/code&gt; you can post them also in a tweet using.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# for multiple png attachments
x$rtweet(x$carbons,media_type = &amp;#39;png&amp;#39;) #using default status

# subsets of images
x$rtweet(status=&amp;#39;These are images&amp;#39;,x$carbons[c(1,3)],media_type = &amp;#39;png&amp;#39;)

# for gifs
x$rtweet(status=&amp;#39;This is a gif&amp;#39;, x$carbons,media_type = &amp;#39;gif&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reprex-gist&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reprex + Gist&lt;/h3&gt;
&lt;p&gt;Finally, thanks to a suggestion from &lt;a href=&#34;https://twitter.com/ma_salmon&#34;&gt;Maelle Salmon&lt;/a&gt; to use &lt;a href=&#34;https://github.com/maelle/reprex_demo&#34;&gt;carbonate with gist and reprex&lt;/a&gt;, now you can create and tweet out the reprex using carbon images linked to your Gist.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reprex::reprex(plot(1:10),
               outfile = &amp;quot;demo_carbonate&amp;quot;,
               venue = &amp;quot;r&amp;quot;)

gistr::gist_auth(reauth = TRUE)

gist_out &amp;lt;- gistr::gist_create(&amp;#39;demo_carbonate_reprex.md&amp;#39;,browse = FALSE)

x &amp;lt;- carbonate::carbon$new(readLines(&amp;#39;demo_carbonate_reprex_rendered.R&amp;#39;))

x$carbonate(code = clipr::read_clip())

x$carbons &amp;lt;- append(x$carbons,
                    magick::image_read(&amp;#39;demo_carbonate_reprex_files/figure-markdown_strict/reprex-body-1.png&amp;#39;)
                    )
x$rtweet(
  media = x$carbons,
  status = glue::glue(&amp;quot;gistr + carbonate #rstats
                      {emo::ji(&amp;#39;link&amp;#39;)} {tinyurl(gist_out$html_url)}&amp;quot;),
  media_format = &amp;#39;png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;ro&#34; dir=&#34;ltr&#34;&gt;
gistr + carbonate &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt;&lt;br&gt;üîó &lt;a href=&#34;https://t.co/XWMHOe2DSc&#34;&gt;https://t.co/XWMHOe2DSc&lt;/a&gt; &lt;a href=&#34;https://t.co/zbxphOS0gW&#34;&gt;pic.twitter.com/zbxphOS0gW&lt;/a&gt;
&lt;/p&gt;
‚Äî yoni sidi (&lt;span class=&#34;citation&#34;&gt;@yoniceedee&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/yoniceedee/status/1056587571042705410?ref_src=twsrc%5Etfw&#34;&gt;October 28, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Automating roxygen2 package documentation</title>
      <link>/post/2017-09-18-sinew/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-09-18-sinew/</guid>
      <description>

&lt;p&gt;Thinking of creating a new package? Dread the task of function documentation? Afraid to run &lt;code&gt;devtools::check(build_args = &#39;--as-cran&#39;)&lt;/code&gt; and get bombarded by Errors, Warnings, and Notes (oh my!) ? Wait&amp;hellip;. breathe!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/pWYReekqQW72U/giphy.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After feeling all that anxiety and following all of Hadley&amp;rsquo;s &lt;a href=&#34;http://r-pkgs.had.co.nz/man.html&#34;&gt;directions&lt;/a&gt; online, I felt I was doing a lot of manual labour, and that a package should be doing all lot of this for me. So we wrote one - &lt;code&gt;sinew&lt;/code&gt; (sin-yu).&lt;/p&gt;

&lt;h2 id=&#34;tl-dr-sinew-is-an-automatic-roxygen2-documentation-creator&#34;&gt;tl;dr: &lt;code&gt;sinew&lt;/code&gt; is an automatic roxygen2 documentation creator&lt;/h2&gt;

&lt;p&gt;Quick example, run it in R:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt; install.packages(&amp;quot;sinew&amp;quot;) # or devtools::install_github(&#39;metrumresearchgroup/sinew&#39;)
 
 # simple function
 
 myFun &amp;lt;- function(h=1){
   utils::head(rnorm(10),h)
 }
 
 library(sinew)
 makeOxygen(myFun)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will produce the following output (which you can then append above your definition of &lt;code&gt;myFun&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(myFun)

#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param h PARAM_DESCRIPTION, Default: 1
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @details DETAILS
#&#39; @examples 
#&#39; \dontrun{
#&#39; if(interactive()){
#&#39;  #EXAMPLE1
#&#39;  }
#&#39; }
#&#39; @seealso 
#&#39;  \code{\link[utils]{head}}
#&#39; @rdname myFun
#&#39; @export 
#&#39; @importFrom utils head
myFun &amp;lt;- function(h=1){
  utils::head(h)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or document functions interactively with the shiny gadget:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;400&#34; src=&#34;https://www.youtube.com/embed/cabOtf191OQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;For more details read the rest of the post, or skip straight to the gitbook: &lt;a href=&#34;https://metrumresearchgroup.github.io/sinew/&#34;&gt;https://metrumresearchgroup.github.io/sinew/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;why-sinew&#34;&gt;Why sinew?&lt;/h2&gt;

&lt;p&gt;Let me explain by example&amp;hellip;&lt;/p&gt;

&lt;p&gt;The current way to start down the documentation path is to create a function, I&amp;rsquo;ll use &lt;code&gt;myFun&lt;/code&gt; defined above. Next I would use the skeleton provided by RStudio (In the toolbar Code=&amp;gt;Insert Roxygen Skeleton).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; Title
#&#39;
#&#39; @param h 
#&#39;
#&#39; @return
#&#39; @export
#&#39;
#&#39; @examples
myFun &amp;lt;- function(h=1){
  utils::head(h)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gets me on my way, but there is information nested within the function itself that can be useful to document and manage the namespace&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the default value of &lt;code&gt;h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the function &lt;code&gt;head&lt;/code&gt; needs to be imported from the package &lt;code&gt;utils&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I could just add that manually but this is just a toy example, actual functions have many parameters and you can import many functions from a number of different packages.&lt;/p&gt;

&lt;p&gt;Trying to do the documentation bookkeeping as you develop the function will make you lose your train of thought, and make you forget that great idea you just had. Or you could write the full function and then at the end try to figure out what functions you need to import what packages they are from, should they get a seealso field, what parameters you used and so on&amp;hellip;&lt;/p&gt;

&lt;p&gt;Sinew will do this for you. It will parse your full function for relevant information that can fill in the blanks in the roxygen2 documentation and manage your import fields for you.
Think of it as connecting the meat of your function to the Roxygen2 skeleton - or just the &lt;a href=&#34;https://en.wikipedia.org/wiki/Tendon&#34;&gt;definition&lt;/a&gt; of the term sinew (again sin-yu). Added bonus it will help keep your package CRAN ready as you develop.&lt;/p&gt;

&lt;p&gt;So how would that skeleton look after running it with sinew?&lt;/p&gt;

&lt;p&gt;The workhorse of sinew is &lt;code&gt;makeOxygen&lt;/code&gt;, it takes functions and returns Roxygen2 headers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(myFun)

#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param h PARAM_DESCRIPTION, Default: 1
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @details DETAILS
#&#39; @examples 
#&#39; \dontrun{
#&#39; if(interactive()){
#&#39;  #EXAMPLE1
#&#39;  }
#&#39; }
#&#39; @seealso 
#&#39;  \code{\link[utils]{head}}
#&#39; @rdname myFun
#&#39; @export 
#&#39; @importFrom utils head
myFun &amp;lt;- function(h=1){
  utils::head(h)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That little function had a lot of information embbeded in it to make your documentation well rounded.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each field has it&amp;rsquo;s own &lt;em&gt;placeholder&lt;/em&gt; that will guide you to what is expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;param&lt;/strong&gt; has the default value built in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;examples&lt;/strong&gt;  is populated with a more current layout to support htmlwidget and shiny examples.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;utils&lt;/code&gt; was found and was added to &lt;strong&gt;importFrom&lt;/strong&gt; automatically as was it&amp;rsquo;s &lt;strong&gt;seealso&lt;/strong&gt; counterpart.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rdname&lt;/strong&gt; was added with the name of the function.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now lets take a real function - &lt;code&gt;lm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(lm)

#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param formula PARAM_DESCRIPTION
#&#39; @param data PARAM_DESCRIPTION
#&#39; @param subset PARAM_DESCRIPTION
#&#39; @param weights PARAM_DESCRIPTION
#&#39; @param na.action PARAM_DESCRIPTION
#&#39; @param method PARAM_DESCRIPTION, Default: &#39;qr&#39;
#&#39; @param model PARAM_DESCRIPTION, Default: TRUE
#&#39; @param x PARAM_DESCRIPTION, Default: FALSE
#&#39; @param y PARAM_DESCRIPTION, Default: FALSE
#&#39; @param qr PARAM_DESCRIPTION, Default: TRUE
#&#39; @param singular.ok PARAM_DESCRIPTION, Default: TRUE
#&#39; @param contrasts PARAM_DESCRIPTION, Default: NULL
#&#39; @param offset PARAM_DESCRIPTION
#&#39; @param ... PARAM_DESCRIPTION
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @details DETAILS
#&#39; @examples 
#&#39; \dontrun{
#&#39; if(interactive()){
#&#39;  #EXAMPLE1
#&#39;  }
#&#39; }
#&#39; @seealso 
#&#39;  \code{\link[stats]{model.frame}}
#&#39; @rdname lm
#&#39; @export 
#&#39; @importFrom stats model.frame
lm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That would of been a pain to do by hand, all that is left to do is replace the placeholders with relevant information and you&amp;rsquo;re done. Also notice the layout is consistent so other people (and you) can easily navigate the help across the package functions.&lt;/p&gt;

&lt;h2 id=&#34;a-few-features-and-use-cases&#34;&gt;A few features and use cases:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Setting package options persistent during a session is done using &lt;code&gt;sinew_opts&lt;/code&gt; (much like &lt;code&gt;knitr::opts_chunk&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For keeping settings persistent across sessions during package development sinew reads from the working directory on load a file named &lt;code&gt;_sinewconfig.yml&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To run &lt;code&gt;makeOxygen&lt;/code&gt; in batch mode (like a whole &lt;code&gt;./R&lt;/code&gt; package subdirectory) use the function &lt;code&gt;makeOxyFile&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To convert a long single file with multiple functions interwoven with a body script into multiple single function files, and keeping the script body intact,  use &lt;code&gt;untangle&lt;/code&gt;. If a function within the long file already has roxygen2 headers then they will be carried over to the new file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To quickly run through a whole package and create the DESCRIPTION file &lt;code&gt;Imports:&lt;/code&gt; field use &lt;code&gt;makeImport(&#39;./R&#39;,format=&#39;description&#39;)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After updating a function the documentation gets out of synch and needs updating. &lt;code&gt;moga&lt;/code&gt; (make oxygen great again!) will cross check the current documentation of an R script and the current function script itself and update/add any parameters/defaults/imports discrepancies.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Setting &lt;code&gt;cut&lt;/code&gt; to an integer value in &lt;code&gt;makeOxygen&lt;/code&gt; to return &lt;strong&gt;import package&lt;/strong&gt; instead of &lt;strong&gt;importFrom package function1 [function2 &amp;hellip;]&lt;/strong&gt; for packages that call more than the value assigned to &lt;code&gt;cut&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;interactive-documentation&#34;&gt;Interactive Documentation&lt;/h2&gt;

&lt;p&gt;A Shiny gadget was built to combine all this into an easy to use interface. Highlight text (preferably a function) in source editor of RStudio and then deploy the addin from the addins menu.&lt;/p&gt;

&lt;p&gt;The gadget can read in almost any source you have the function in: unsourced functions, functions in the global environment, in a loaded package, in an installed package that you didn&amp;rsquo;t load yet.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;400&#34; src=&#34;https://www.youtube.com/embed/S8dAOwrvoDw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The gadget will allow you to preview the roxygen header, add and remove roxygen2 fields with checkboxes and control the level of &lt;code&gt;cut&lt;/code&gt;. When you&amp;rsquo;re ready insert what you see in the preview pane into the editor. When you&amp;rsquo;re done with one function highlight another one and continue to work, if you need to move to another file tab&amp;hellip; that&amp;rsquo;s ok too!&lt;/p&gt;

&lt;p&gt;If there is already documentation move into &lt;strong&gt;update mode&lt;/strong&gt;, and touch up any changes that need to be made through &lt;code&gt;moga&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sinew</title>
      <link>/post/2017-05-03-sinew/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-05-03-sinew/</guid>
      <description>

&lt;p&gt;Sinew is a R package that generates a Roxygen skeleton populated with information scraped from the function script.&lt;/p&gt;

&lt;h2 id=&#34;functionality&#34;&gt;Functionality&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/metrumresearchgroup/sinew#makeoxygen&#34;&gt;makeOxygen&lt;/a&gt;: Create skeleton for Roxygen2 documentation populated with information scraped from within the package function scripts.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/metrumresearchgroup/sinew#makeimport&#34;&gt;makeImport&lt;/a&gt;: Create import calls for DESCRIPTION, NAMESPACE and Roxygen2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/metrumresearchgroup/sinew#makedictionary&#34;&gt;makeDictionary&lt;/a&gt;: Create an R file of all the unique roxygen parameter fields in a package R subdirectory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;makeoxygen&#34;&gt;makeOxygen&lt;/h2&gt;

&lt;p&gt;Function that returns the skeleton for &lt;a href=&#34;https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html&#34;&gt;roxygen2&lt;/a&gt; documentation including title, description, return, import and other fields populated with information scraped from the function script.&lt;/p&gt;

&lt;p&gt;The addin &lt;code&gt;createOxygen&lt;/code&gt; uses highlighted text in the active document of  RStudio as the object argument.&lt;/p&gt;

&lt;h3 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h3&gt;

&lt;p&gt;makeOxygen is the main function in the package. Running the default setting returns a skeleton with minimal required fields to run &lt;code&gt;devtools::check(build_args = &#39;--as-cran&#39;)&lt;/code&gt;: title, description, and param.&lt;/p&gt;

&lt;h4 id=&#34;adding-some-meat-to-the-bones&#34;&gt;Adding Some Meat to the Bones&amp;hellip;&lt;/h4&gt;

&lt;p&gt;The added value of sinew is that it scrapes the script and fills in many important holes in the documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;param default values:

&lt;ul&gt;
&lt;li&gt;if a default value is set for a function parameter it will be added to the end  &lt;code&gt;@param&lt;/code&gt; line.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;import/importFrom

&lt;ul&gt;
&lt;li&gt;It is assumed that the developer is abiding by the CRAN rules and uses the proper namespace syntax &lt;code&gt;package::function&lt;/code&gt; when calling functions in the script. The package scrapes the script with &lt;code&gt;makeImport&lt;/code&gt; to create the proper calls for &lt;code&gt;@import&lt;/code&gt; and &lt;code&gt;@importFrom&lt;/code&gt; which are placed at the bottom of the output. The user has control the number of functions that are listed in &lt;code&gt;importFrom package function1 [ function2 ...]&lt;/code&gt; until only &lt;code&gt;@import package&lt;/code&gt; is returned (more below).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;seealso

&lt;ul&gt;
&lt;li&gt;linking to other packages is also taken care of when adding the field &lt;code&gt;@seealso&lt;/code&gt;. Any functions that are included in &lt;code&gt;@importFrom&lt;/code&gt; will have a link to them by default.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples showing different parameter specification in makeOxygen&lt;/p&gt;

&lt;h4 id=&#34;basic&#34;&gt;Basic&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(lm)
#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param formula PARAM_DESCRIPTION
#&#39; @param data PARAM_DESCRIPTION
#&#39; @param subset PARAM_DESCRIPTION
#&#39; @param weights PARAM_DESCRIPTION
#&#39; @param na.action PARAM_DESCRIPTION
#&#39; @param method PARAM_DESCRIPTION, Default: &#39;qr&#39;
#&#39; @param model PARAM_DESCRIPTION, Default: TRUE
#&#39; @param x PARAM_DESCRIPTION, Default: FALSE
#&#39; @param y PARAM_DESCRIPTION, Default: FALSE
#&#39; @param qr PARAM_DESCRIPTION, Default: TRUE
#&#39; @param singular.ok PARAM_DESCRIPTION, Default: TRUE
#&#39; @param contrasts PARAM_DESCRIPTION, Default: NULL
#&#39; @param offset PARAM_DESCRIPTION
#&#39; @param ... PARAM_DESCRIPTION
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @importFrom stats model.frame
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;add-fields&#34;&gt;Add_fields&lt;/h4&gt;

&lt;p&gt;Control over which roxygen2 fields are added to the header is passed through &lt;code&gt;add_fields&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(colourpicker:::colourPickerGadget,add_fields = c(&#39;export&#39;,&#39;details&#39;,&#39;examples&#39;))
#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param numCols PARAM_DESCRIPTION, Default: 3
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @export
#&#39; @details DETAILS
#&#39; @examples
#&#39; EXAMPLE1 
#&#39; @importFrom colourpicker colourInput updateColourInput
#&#39; @importFrom grDevices colours
#&#39; @importFrom shiny addResourcePath dialogViewer runGadget shinyApp
#&#39; @importFrom shinyjs useShinyjs extendShinyjs toggleState disable onclick alert
#&#39; @importFrom utils packageVersion
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;cut&#34;&gt;Cut&lt;/h4&gt;

&lt;p&gt;Passing &lt;code&gt;cut&lt;/code&gt; to makeOxygen to return &lt;code&gt;import package&lt;/code&gt; instead of &lt;code&gt;importFrom package funtion1 [function2 ...]&lt;/code&gt; for packages that call more than the value assigned to cut&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; makeOxygen(colourpicker:::colourPickerGadget,add_fields = c(&#39;export&#39;,&#39;details&#39;,&#39;examples&#39;),cut=3)
#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param numCols PARAM_DESCRIPTION, Default: 3
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @export
#&#39; @details DETAILS
#&#39; @examples
#&#39; EXAMPLE1 
#&#39; @importFrom colourpicker colourInput updateColourInput
#&#39; @importFrom grDevices colours
#&#39; @import shiny
#&#39; @import shinyjs
#&#39; @importFrom utils packageVersion
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;seealso&#34;&gt;Seealso&lt;/h4&gt;

&lt;p&gt;When calling &lt;code&gt;addfields(&#39;seealso&#39;)&lt;/code&gt; the function will give a guess of which functions to add conditional on what value cut it set to. That is any function returned with importFrom will also have a seealso link created for it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; makeOxygen(shinyHeatmaply:::heatmaplyGadget,cut=3,add_fields = &#39;seealso&#39;)
#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param obj PARAM_DESCRIPTION
#&#39; @param plotHeight PARAM_DESCRIPTION, Default: 800
#&#39; @param viewerType PARAM_DESCRIPTION, Default: &#39;paneViewer&#39;
#&#39; @param ... PARAM_DESCRIPTION
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @seealso
#&#39;  \code{\link[DT]{dataTableOutput}},\code{\link[DT]{renderDataTable}}
#&#39;  \code{\link[tools]{file_path_sans_ext}}
#&#39;  \code{\link[xtable]{xtable}}
#&#39; @importFrom DT dataTableOutput renderDataTable
#&#39; @import heatmaply
#&#39; @import htmltools
#&#39; @import plotly
#&#39; @import shiny
#&#39; @import stats
#&#39; @importFrom tools file_path_sans_ext
#&#39; @importFrom xtable xtable

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dictionary&#34;&gt;Dictionary&lt;/h4&gt;

&lt;p&gt;A dictionary is an R file produced with &lt;a href=&#34;https://github.com/metrumresearchgroup/sinew#makedictionary&#34;&gt;makeDictionary&lt;/a&gt;. This R file contains  all the unique roxygen parameter fields in a package R subdirectory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(tabular,add_fields = c(&#39;examples&#39;,&#39;export&#39;))

#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param df PARAM_DESCRIPTION
#&#39; @param header PARAM_DESCRIPTION, Default: TRUE
#&#39; @param ... PARAM_DESCRIPTION
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @examples 
#&#39; EXAMPLE1 
#&#39;
#&#39; @export 

dict_loc=&#39;https://raw.githubusercontent.com/metrumresearchgroup/sinew/master/man-roxygen/Dictionary-1.R&#39;

makeOxygen(tabular,use_dictionary = dict_loc,add_fields = c(&#39;examples&#39;,&#39;export&#39;))

#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param df data.frame to convert to table
#&#39; @param header boolean to control if header is created from names(df), Default: TRUE
#&#39; @param ...
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @examples 
#&#39; EXAMPLE1 
#&#39;
#&#39; @export 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;data-frames&#34;&gt;Data.frames&lt;/h4&gt;

&lt;p&gt;makeOxygen also creates documentation for data.frames and tibble objects&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(iris)
#&#39; @title DATASET_TITLE
#&#39; @description DATASET_DESCRIPTION
#&#39; @format A data frame with 150 rows and 5 variables:
#&#39; \describe{
#&#39;   \item{\code{Sepal.Length}}{double COLUMN_DESCRIPTION}
#&#39;   \item{\code{Sepal.Width}}{double COLUMN_DESCRIPTION}
#&#39;   \item{\code{Petal.Length}}{double COLUMN_DESCRIPTION}
#&#39;   \item{\code{Petal.Width}}{double COLUMN_DESCRIPTION}
#&#39;   \item{\code{Species}}{integer COLUMN_DESCRIPTION} 
#&#39;}
&amp;quot;iris&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;makeimport&#34;&gt;makeImport&lt;/h2&gt;

&lt;p&gt;When you are building a package to submit to cran and you need to have namespace calls for any function that is being imported. It is a pain to manually parse through the code looking for all the &lt;code&gt;*::*&lt;/code&gt; and writing it in the roxygen header. This function does that for you.&lt;/p&gt;

&lt;p&gt;You can write normally your script with the namespace calls and in the end run the function and you can paste the output into the header. (or use it as part of &lt;code&gt;makeOxygen&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;The function is written to work on single files or whole directories, like a package R subdirectory.&lt;/p&gt;

&lt;p&gt;The output can be set to return the format needed for either an roxygen header, NAMESPACE or the DESCRIPTION&lt;/p&gt;

&lt;h3 id=&#34;description&#34;&gt;DESCRIPTION&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeImport(script=list.files(&#39;R&#39;,full.names = T),print = T,format = &#39;description&#39;)
Imports: rstudioapi,utils
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;namespace&#34;&gt;NAMESPACE&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeImport(script=list.files(&#39;R&#39;,full.names = T),print = T,format = &#39;namespace&#39;)
 
importFrom(rstudioapi,getActiveDocumentContext)
importFrom(rstudioapi,insertText)
importFrom(utils,installed.packages)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;roxygen&#34;&gt;Roxygen&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeImport(script=list.files(&#39;R&#39;,full.names = T),print = T,format = &#39;oxygen&#39;)
 
R/importAddin.R
#&#39; @importFrom rstudioapi getActiveDocumentContext
 
R/makeImport.R
#&#39; @importFrom utils installed.packages
 
R/makeOxygen.R

 
R/makeSeeAlso.R

 
R/oxygenAddin.R
#&#39; @importFrom rstudioapi getActiveDocumentContext insertText
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;importfrom-cutoff&#34;&gt;importFrom cutoff&lt;/h4&gt;

&lt;p&gt;Setting cut to a value allows for control of how many functions to list in a package before concatenating the &lt;code&gt;importFrom&lt;/code&gt; to an &lt;code&gt;import&lt;/code&gt;. This is useful when there are many functions being used throughout the package from the same library and it is practically the same as just importing the whole library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeImport(script=&#39;R/oxygenAddin.R&#39;,print = T,format = &#39;oxygen&#39;)

R/oxygenAddin.R
#&#39; @importFrom rstudioapi getActiveDocumentContext insertText
 
makeImport(script=&#39;R/oxygenAddin.R&#39;,print = T,format = &#39;oxygen&#39;,cut=2)
 
R/oxygenAddin.R
#&#39; @import rstudioapi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;makedictionary&#34;&gt;makeDictionary&lt;/h3&gt;

&lt;p&gt;This function takes the idea of roxygen templates, but repurposes their use. It creates an R file of all the unique roxygen parameter fields in a package R subdirectory. This serves a few functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates a general template for regular use with Roxygen2&lt;/li&gt;
&lt;li&gt;Simple way to check that there are no redundant parameter descriptions and that they are consistent.&lt;/li&gt;
&lt;li&gt;When present, this is used internally with &lt;strong&gt;ls_param&lt;/strong&gt; to call parameter descriptions in bulk from a centralized template to populate makeOxygen skeletons.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example in the &lt;a href=&#34;https://github.com/metrumresearchgroup/sinew/tree/master/man-roxygen&#34;&gt;man-roxygen&lt;/a&gt; there is a Dictionary-1.R file that was created by &lt;strong&gt;makeDictionary&lt;/strong&gt;. Using &lt;strong&gt;ls_param&lt;/strong&gt; a query is run on the dictionary to return the param fields that intersect with the formals call to the functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dict_loc=&#39;https://raw.githubusercontent.com/metrumresearchgroup/sinew/master/man-roxygen/Dictionary-1.R&#39;

ls_param(makeOxygen,dictionary = dict_loc)

#&#39; @param obj function or name of function
#&#39; @param add_default boolean to add defaults values to the end of the PARAM fields, Default: TRUE
#&#39; @param add_fields character vector to add additional roxygen fields, Default: NULL
#&#39; @param print boolean print output to console, Default: TRUE
#&#39; @param ... 

names(formals(makeOxygen))
[1] &amp;quot;obj&amp;quot;         &amp;quot;add_default&amp;quot; &amp;quot;add_fields&amp;quot;  &amp;quot;print&amp;quot;       &amp;quot;...&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;
Jonathan Sidi joined Metrum Research Group in 2016 after working for several years on problems in applied statistics, financial stress testing and economic forecasting in both industrial and academic settings.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
To learn more about additional open-source software packages developed by Metrum Research Group please visit the Metrum &lt;a href=&#34;https://www.metrumrg.com/try-open-source-tools/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
Contact: For questions and comments, feel free to email me at: yonis@metrumrg.com or open an issue in &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/issues&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(post originally published on &lt;a href=&#34;http://r-posts.com/adding-sinew-to-roxygen2-skeletons/&#34;&gt;r-posts&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggedit 0.2.0</title>
      <link>/post/2017-03-31-ggedit_cranpost/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-03-31-ggedit_cranpost/</guid>
      <description>

&lt;p&gt;We are pleased to announce the release of the ggedit package on &lt;a href=&#34;https://cran.r-project.org/web/packages/ggedit/index.html&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install the package you can call the standard R command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&#39;ggedit&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The source version is still tracked on &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit&#34;&gt;github&lt;/a&gt;, which has been reorganized to be easier to navigate.&lt;/p&gt;

&lt;p&gt;To install the dev version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devtools::install_github(&#39;metrumresearchgroup/ggedit&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-is-ggedit&#34;&gt;What is ggedit?&lt;/h3&gt;

&lt;p&gt;ggedit is an R package that is used to facilitate ggplot formatting. With ggedit, R users of all experience levels can easily move from creating ggplots to refining aesthetic details, all while maintaining portability for further reproducible research and collaboration.&lt;/p&gt;

&lt;p&gt;ggedit is run from an R console or as a reactive object in any Shiny application. The user inputs a ggplot object or a list of objects. The application populates Bootstrap modals with all of the elements found in each layer, scale, and theme of the ggplot objects. The user can then edit these elements and interact with the plot as changes occur. During editing, a comparison of the script is logged, which can be directly copied and shared. The application output is a nested list containing the edited layers, scales, and themes in both object and script form, so you can apply the edited objects independent of the original plot using regular ggplot2 grammar.&lt;/p&gt;

&lt;p&gt;Why does it matter? ggedit promotes efficient collaboration. You can share your plots with team members to make formatting changes, and they can then send any objects they‚Äôve edited back to you for implementation. No more email chains to change a circle to a triangle!&lt;/p&gt;

&lt;h3 id=&#34;updates-in-ggedit-0-2-0&#34;&gt;Updates in ggedit 0.2.0:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The layer modal (popups) elements have been reorganized for less clutter and easier navigation.&lt;/li&gt;
&lt;li&gt;The S3 method written to plot and compare themes has been removed from the package, but can still be found on the repo, see &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/blob/master/Miscellaneous/Utilities/plot.theme.R&#34;&gt;plot.theme&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;deploying&#34;&gt;Deploying&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- call from the console: `ggedit(p)`
- call from the addin toolbar: highlight script of a plot object on the source editor window of RStudio and run from toolbar.
- call as part of Shiny: use the Shiny module syntax to call the ggEdit UI elements.
    - server: `callModule(ggEdit,&#39;pUI&#39;,obj=reactive(p))`
    - ui: `ggEditUI(&#39;pUI&#39;)`
- if you have installed the package you can see an example of a Shiny app by executing `runApp(system.file(&#39;examples/shinyModule.R&#39;,package = &#39;ggedit&#39;))`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;outputs&#34;&gt;Outputs&lt;/h3&gt;

&lt;p&gt;ggedit returns a list containing 8 elements either to the global enviroment or as a reactive output in Shiny.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;updatedPlots

&lt;ul&gt;
&lt;li&gt;List containing updated ggplot objects&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayers

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated layers (ggproto) objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayersElements

&lt;ul&gt;
&lt;li&gt;For each plot a list elements and their values in each layer&lt;/li&gt;
&lt;li&gt;Can be used to update the new values in the original code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayerCalls

&lt;ul&gt;
&lt;li&gt;For each plot a list of scripts that can be run directly from the console to create a layer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedThemes

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated theme objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;li&gt;If the user doesn&amp;rsquo;t edit the theme updatedThemes will not be returned&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedThemeCalls

&lt;ul&gt;
&lt;li&gt;For each plot a list of scripts that can be run directly from the console to create a theme&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedScales

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated scales (ggproto) objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedScaleCalls

&lt;ul&gt;
&lt;li&gt;For each plot a list of scripts that can be run directly from the console to create a scale&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;short-clip-to-use-ggedit-in-shiny&#34;&gt;Short Clip to use ggedit in Shiny&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/embed/pJ1kbd_OVwg&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/pJ1kbd_OVwg/0.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=71aadbe0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;
Jonathan Sidi joined Metrum Research Group in 2016 after working for several years on problems in applied statistics, financial stress testing and economic forecasting in both industrial and academic settings.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
To learn more about additional open-source software packages developed by Metrum Research Group please visit the Metrum &lt;a href=&#34;https://www.metrumrg.com/try-open-source-tools/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
Contact: For questions and comments, feel free to email me at: yonis@metrumrg.com or open an issue in &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/issues&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(post originally published on &lt;a href=&#34;http://r-posts.com/ggedit-0-2-0-is-now-on-cran/&#34;&gt;r-posts&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggedit 0.1.1</title>
      <link>/post/2017-02-22-ggedit3/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-02-22-ggedit3/</guid>
      <description>

&lt;p&gt;ggedit is a package that lets users interactively edit ggplot layer and theme aesthetics.  In a previous &lt;a href=&#34;https://yonicd.github.io/2016-12-13-ggedit/&#34;&gt;post&lt;/a&gt; we showed you how to use it in a collaborative workflow using standard R scripts. More importantly, we &lt;a href=&#34;https://www.r-bloggers.com/ggedit-0-0-2-a-gui-for-advanced-editing-of-ggplot2-objects/&#34;&gt;highlighted&lt;/a&gt; that ggedit outputs to the user, after editing, updated: gg plots, layers, scales and themes as both self-contained objects &lt;em&gt;and&lt;/em&gt; script that you can paste directly in your code.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;metrumresearchgroup/ggedit&amp;quot;,subdir=&amp;quot;ggedit&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;version-0-1-1-updates&#34;&gt;version 0.1.1 Updates&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ggEdit Shiny module&lt;/strong&gt;: use ggedit as part of any Shiny application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gglsave&lt;/strong&gt;: generalization of ggsave to save multiple outputs of ggplot to single file and multiple files in a single call to various graphics devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ggedit-shiny-module&#34;&gt;ggEdit Shiny module&lt;/h2&gt;

&lt;p&gt;This post will demonstrate a new method to use ggedit, &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Shiny modules&lt;/a&gt;. A Shiny module is a chunk of Shiny code that can be reused many times in the same application, but generic enough so it can be applied in any Shiny app (in simplest terms think of it as a Shiny function). By making ggedit a Shiny module we can now replace any &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/latest/renderPlot.html&#34;&gt;renderPlot()&lt;/a&gt; call that inputs a ggplot and outputs in the UI &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/latest/plotOutput.html&#34;&gt;plotOutput()&lt;/a&gt;, with an interactive ggedit layout. The analogy between how to use the ggEdit module in comparison to a standard renderPlot call can be seen in the table below.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;standard Shiny&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Shiny Module&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;output$id=renderPlot(p)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;reactiveOutput=callModule(ggEdit,id,reactive(p))&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;UI&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;plotOutput(id)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ggEditUI(id)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;We can see that there are a few differences in the calls. To call a module you need to run a Shiny function  &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/latest/callModule.html&#34;&gt;callModule&lt;/a&gt;, in this case ggEdit. Next, a character id for the elements the module will create in the Shiny environment and finally the arguments that are expected by the module, in this case a reactive object that outputs a ggplot or list of ggplots. This is coupled with ggEditUI, which together create a ggedit environment to edit the plots during a regular Shiny app.&lt;/p&gt;

&lt;p&gt;In addition to the output UI the user also gets a reactive output that has all the objects that are in the regular ggedit package (plots, layers, scales, themes) both in object and script forms. This has great advantages if you want to let users edit plots while keeping track of what they are changing. A realistic example of this would be clients (be it industry or academia) that are shown a set of default plots, with the appropriate data, and then they are given the opportunity to customize according to their specifications. Once they finish editing, the script is automatically saved to the server, updating the clients portfolio with their preferred aesthetics. No more email chains on changing a blue point to an aqua star!&lt;/p&gt;

&lt;p&gt;Below is a small example of a static ggplot using renderPlot/plotOutput and how to call the same plot and a list of plots using ggEdit/ggeditUI. We added a small reactive text output so you can see the real-time changes of the aesthetic editing being returned to the server.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;!---
&lt;a href=&#34;http://www.youtube.com/watch?v=pJ1kbd_OVwg&#34; target=&#34;_blank&#34; &gt;&lt;img src=&#34;http://img.youtube.com/vi/pJ1kbd_OVwg/0.jpg&#34; alt=&#34;ggEdit Shiny module&#34;&gt;&lt;/a&gt;
---&gt;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pJ1kbd_OVwg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;source-code-for-example&#34;&gt;Source Code for example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggedit)

server &amp;lt;- function(input, output,session) {
  p1=ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+geom_point()
  p2=ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+geom_line()+geom_point()
  p3=list(p1=p1,p2=p2)

  output$p&amp;lt;-renderPlot({p1})
  outp1&amp;lt;-callModule(ggEdit,&#39;pOut1&#39;,obj=reactive(list(p1=p1)))
  outp2&amp;lt;-callModule(ggEdit,&#39;pOut2&#39;,obj=reactive(p3))

  output$x1&amp;lt;-renderUI({
    layerTxt=outp1()$UpdatedLayerCalls$p1[[1]]
            aceEditor(outputId = &#39;layerAce&#39;,value=layerTxt,
                      mode = &amp;quot;r&amp;quot;, theme = &amp;quot;chrome&amp;quot;, 
                      height = &amp;quot;100px&amp;quot;, fontSize = 12,wordWrap = T)
         })  
  
  output$x2&amp;lt;-renderUI({
    themeTxt=outp1()$UpdatedThemeCalls$p1
            aceEditor(outputId = &#39;themeAce&#39;,value=themeTxt,
                      mode = &amp;quot;r&amp;quot;, theme = &amp;quot;chrome&amp;quot;, 
                      height = &amp;quot;100px&amp;quot;, fontSize = 12,wordWrap = T)
  })  

}

ui &amp;lt;-fluidPage(
  conditionalPanel(&amp;quot;input.tbPanel==&#39;tab2&#39;&amp;quot;,
  sidebarPanel(uiOutput(&#39;x1&#39;),uiOutput(&#39;x2&#39;))),
  mainPanel(
    tabsetPanel(id = &#39;tbPanel&#39;,
      tabPanel(&#39;renderPlot/plotOutput&#39;,value = &#39;tab1&#39;,plotOutput(&#39;p&#39;)),
      tabPanel(&#39;ggEdit/ggEditUI&#39;,value = &#39;tab2&#39;,ggEditUI(&amp;quot;pOut1&amp;quot;)),
      tabPanel(&#39;ggEdit/ggEditUI with lists of plots&#39;,value = &#39;tab3&#39;,ggEditUI(&amp;quot;pOut2&amp;quot;))
      )
    )
  )


shinyApp(ui, server)

&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;
Jonathan Sidi joined Metrum Research Group in 2016 after working for several years on problems in applied statistics, financial stress testing and economic forecasting in both industrial and academic settings.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
To learn more about additional open-source software packages developed by Metrum Research Group please visit the Metrum &lt;a href=&#34;https://www.metrumrg.com/try-open-source-tools/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
Contact: For questions and comments, feel free to email me at: yonis@metrumrg.com or open an issue in &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/issues&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(post originally published on &lt;a href=&#34;http://r-posts.com/ggedit-0-1-1-shiny-module-to-interactvely-edit-ggplots-within-shiny-applications/&#34;&gt;r-posts&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggedit</title>
      <link>/post/2016-12-13-ggedit/</link>
      <pubDate>Tue, 13 Dec 2016 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2016-12-13-ggedit/</guid>
      <description>

&lt;p&gt;ggplot2 has become the standard of plotting in R for many users. New users, however, may find the learning curve steep at first, and more experienced users may find it challenging to keep track of all the options (especially in the theme!).&lt;/p&gt;

&lt;p&gt;ggedit is a package that helps users bridge the gap between making a plot and getting all of those pesky plot aesthetics just right, all while keeping everything portable for further research and collaboration.&lt;/p&gt;

&lt;p&gt;ggedit is powered by a Shiny gadget where the user inputs a ggplot plot object or a list of ggplot objects. You can run ggedit directly from the console from the Addin menu within RStudio.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;metrumresearchgroup/ggedit&amp;quot;,subdir=&amp;quot;ggedit&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;layers&#34;&gt;Layers&lt;/h2&gt;

&lt;p&gt;The gadget creates a popup window which is populated by the information found in each layer. You can edit the aesthetic values found in a layer and see the changes happen in real time.&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/OvMWCHpCmaI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can edit the aesthetic layers while still preserving the original plot, because the changed layers are cloned from the original plot object and are independent of it. The edited layers are provided in the output as objects, so you can use the layers independent of the plot using regular ggplot2 grammar. This is a great advantage when collaborating with other people, where you can send a plot to team members to edit the layers aesthetics and they can send you back just the new layers for you to implement them.&lt;/p&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;p&gt;ggedit also has a theme editor inside. You can edit any element in the theme and see the changes in real time, making the trial and error process quick and easy. Once you are satisfied with the edited theme you can apply it to other plots in the plot list with one click or even make it the &lt;em&gt;session&lt;/em&gt; theme regardless of the gadget. As with layers, the new theme object is part of the output, making collaboration easy.&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/813QxbsrvLM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;outputs&#34;&gt;Outputs&lt;/h2&gt;

&lt;p&gt;The gadget returns a list containing 4 elements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;updatedPlots

&lt;ul&gt;
&lt;li&gt;List containing updated ggplot objects&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayers

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated layers (ggproto) objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayersElements

&lt;ul&gt;
&lt;li&gt;For each plot a list elements and their values in each layer&lt;/li&gt;
&lt;li&gt;Can be used to update the new values in the original code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedThemes

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated theme objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;li&gt;If the user doesn&amp;rsquo;t edit the theme updatedThemes will not be returned&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rgg&#34;&gt;rgg&lt;/h2&gt;

&lt;p&gt;After you finish editing the plots the natural progression is to use them in the rest of the script. In ggedit there is the function rgg (remove and replace ggplot). Using this function you can chain into the original code changes to the plot without multiplying script needlessly.&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/0QmJHwoWQWM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;With this function you can&lt;/p&gt;

&lt;p&gt;Specify which layer you want to remove from a plot:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ggObj%&amp;gt;%rgg(&#39;line&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Provide an index to a specific layer, in instances where there are more than one layer of the same type in the plot&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ggObj%&amp;gt;%rgg(&#39;line&#39;,2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remove a layer from ggObj and replace it with a new one from the ggedit output p.out&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ggObj%&amp;gt;%rgg(&#39;line&#39;,newLayer = p.out$UpdatedLayers)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remove a layer and replace it with a new one and the new theme&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ggObj%&amp;gt;%rgg(&#39;line&#39;,newLayer = p.out$UpdatedLayers)+p.out$UpdatedThemes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There is also a plotting function for ggedit objects that creates a grid.view for you and finds the best grid size for the amount of plots you have in the list. And for the exotic layouts you can give specific positions and the rest will be done for you. If you didn&amp;rsquo;t use ggedit, you can still add the class to any ggplot and use the plotting function just the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(as.ggedit(list(p0,p1,p2,p3)),list(list(rows=1,cols=1:3),
                                       list(rows=2,cols=2),
                                       list(rows=2,cols=1),
                                       list(rows=2,cols=3))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;addin-launch&#34;&gt;Addin Launch&lt;/h2&gt;

&lt;p&gt;To launch the Shiny gadget from the addin menu highlight the code that creates the plot object or the plot name in the source pane of Rstudio, then click on the ggedit addin from the Addins the dropdown menu.&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/693XhHt8fug&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;
Jonathan Sidi joined Metrum Research Group in 2016 after working for several years on problems in applied statistics, financial stress testing and economic forecasting in both industrial and academic settings.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
To learn more about additional open-source software packages developed by Metrum Research Group please visit the Metrum &lt;a href=&#34;https://www.metrumrg.com/try-open-source-tools/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
Contact: For questions and comments, feel free to email me at: yonis@metrumrg.com or open an issue in &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/issues&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(post originally published on &lt;a href=&#34;https://www.r-statistics.com/2016/11/ggedit-interactive-ggplot-aesthetic-and-theme-editor/&#34;&gt;r-statistics&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>