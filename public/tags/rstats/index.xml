<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rstats on Reproducible Random Thoughts</title>
    <link>/tags/rstats/</link>
    <description>Recent content in Rstats on Reproducible Random Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>yonicd@gmail.com (Jonathan Sidi)</managingEditor>
    <webMaster>yonicd@gmail.com (Jonathan Sidi)</webMaster>
    <lastBuildDate>Mon, 29 Oct 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/rstats/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>carbonate</title>
      <link>/post/carbonate/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/carbonate/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://carbon.now.sh/about&#34;&gt;carbon.js&lt;/a&gt; is the easiest way to create beautiful images of your source code, and &lt;a href=&#34;https://yonicd.github.io/carbonate/&#34;&gt;carbonate&lt;/a&gt; creates an api in &lt;code&gt;R&lt;/code&gt; to interact with it. The package gives a new simple way to share your script with the rest of the &lt;code&gt;R&lt;/code&gt; community on posters, slides, Shiny apps and social media!&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
This little snippet combines SO MANY of my favorite &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; üì¶s:&lt;br&gt;‚ú® &lt;a href=&#34;https://twitter.com/jimhester_?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@jimhester_&lt;/span&gt;&lt;/a&gt;&#39;s glue&lt;br&gt;ü•õ &lt;a href=&#34;https://twitter.com/yoniceedee?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@yoniceedee&lt;/span&gt;&lt;/a&gt;&#39;s carbonate&lt;br&gt;üê¶ &lt;a href=&#34;https://twitter.com/kearneymw?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@kearneymw&lt;/span&gt;&lt;/a&gt;&#39;s rtweet&lt;br&gt;üòé &lt;a href=&#34;https://twitter.com/hadleywickham?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@hadleywickham&lt;/span&gt;&lt;/a&gt;&#39;s emo&lt;br&gt;üìç &lt;a href=&#34;https://twitter.com/krlmlr?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@krlmlr&lt;/span&gt;&lt;/a&gt;&#39;s here &lt;a href=&#34;https://t.co/ploHThYu82&#34;&gt;https://t.co/ploHThYu82&lt;/a&gt;
&lt;/p&gt;
‚Äî ùìõùìæùì¨ùîÇ::maternity_leaveü§± (&lt;span class=&#34;citation&#34;&gt;@LucyStats&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/LucyStats/status/1034972003130851328?ref_src=twsrc%5Etfw&#34;&gt;August 30, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#remotes::install_github(&amp;#39;yonicd/carbonate&amp;#39;)
install.packages(&amp;#39;carbonate&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;usage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;div id=&#34;initialize-new-carbon-object&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Initialize new carbon object&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(carbonate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default code in the carbon object is taken from the clipboard.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- carbon$new()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But can also be defined inline. Code can be a character object of any length.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- carbon$new(readLines(&amp;#39;DESCRIPTION&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is kept in the object and can be changed at any time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$code&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Package: carbonate&amp;quot;                                                                                 
##  [2] &amp;quot;Title: Interact with &amp;#39;carbon.js&amp;#39;&amp;quot;                                                                   
##  [3] &amp;quot;Version: 0.1.0&amp;quot;                                                                                     
##  [4] &amp;quot;Authors@R: person(given  = \&amp;quot;Jonathan\&amp;quot;,&amp;quot;                                                           
##  [5] &amp;quot;                 family  = \&amp;quot;Sidi\&amp;quot;,&amp;quot;                                                               
##  [6] &amp;quot;                 email   = \&amp;quot;yonicd@gmail.com\&amp;quot;,&amp;quot;                                                   
##  [7] &amp;quot;                 role    = c(\&amp;quot;aut\&amp;quot;, \&amp;quot;cre\&amp;quot;),&amp;quot;                                                    
##  [8] &amp;quot;                 comment = c(ORCID = \&amp;quot;0000-0002-4222-1819\&amp;quot;))&amp;quot;                                     
##  [9] &amp;quot;Description: Create beautiful images of source code using &amp;#39;carbon.js&amp;#39;&amp;lt;https://carbon.now.sh/about&amp;gt;.&amp;quot;
## [10] &amp;quot;Depends: R (&amp;gt;= 3.2.0)&amp;quot;                                                                              
## [11] &amp;quot;License: MIT + file LICENSE&amp;quot;                                                                        
## [12] &amp;quot;Encoding: UTF-8&amp;quot;                                                                                    
## [13] &amp;quot;LazyData: true&amp;quot;                                                                                     
## [14] &amp;quot;RoxygenNote: 6.1.0&amp;quot;                                                                                 
## [15] &amp;quot;Imports: R6, clipr, magick, wdman, RSelenium, utils, httr, rtweet, yaml&amp;quot;                            
## [16] &amp;quot;Suggests: testthat, covr, knitr, rmarkdown&amp;quot;                                                         
## [17] &amp;quot;URL: https://github.com/yonicd/carbonate&amp;quot;                                                           
## [18] &amp;quot;BugReports: https://github.com/yonicd/carbonate/issues&amp;quot;                                             
## [19] &amp;quot;Roxygen: list(markdown = TRUE)&amp;quot;                                                                     
## [20] &amp;quot;VignetteBuilder: knitr&amp;quot;                                                                             
## [21] &amp;quot;Author: Jonathan Sidi [aut, cre] (&amp;lt;https://orcid.org/0000-0002-4222-1819&amp;gt;)&amp;quot;                         
## [22] &amp;quot;Maintainer: Jonathan Sidi &amp;lt;yonicd@gmail.com&amp;gt;&amp;quot;                                                       
## [23] &amp;quot;Built: R 3.5.1; ; 2018-10-28 15:50:25 UTC; unix&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main job of the package is to convert all the options set by the user into a URI that is sent to the carbon url page, where it is processed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$uri()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://carbon.now.sh/?bg=rgba(171%2C175%2C195%2C0.7)&amp;amp;t=panda-syntax&amp;amp;wt=none&amp;amp;l=r&amp;amp;ds=true&amp;amp;dsyoff=20px&amp;amp;dsblur=68px&amp;amp;wc=true&amp;amp;wa=true&amp;amp;pv=11px&amp;amp;ph=14px&amp;amp;ln=false&amp;amp;fm=Fira%20Code&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=1x&amp;amp;wm=false&amp;amp;ts=false&amp;amp;code=Package%253A%2520carbonate%250ATitle%253A%2520Interact%2520with%2520%27carbon.js%27%250AVersion%253A%25200.1.0%250AAuthors%2540R%253A%2520person(given%2520%2520%253D%2520%2522Jonathan%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520family%2520%2520%253D%2520%2522Sidi%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520email%2520%2520%2520%253D%2520%2522yonicd%2540gmail.com%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520role%2520%2520%2520%2520%253D%2520c(%2522aut%2522%252C%2520%2522cre%2522)%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520comment%2520%253D%2520c(ORCID%2520%253D%2520%25220000-0002-4222-1819%2522))%250ADescription%253A%2520Create%2520beautiful%2520images%2520of%2520source%2520code%2520using%2520%27carbon.js%27%253Chttps%253A%252F%252Fcarbon.now.sh%252Fabout%253E.%250ADepends%253A%2520R%2520(%253E%253D%25203.2.0)%250ALicense%253A%2520MIT%2520%252B%2520file%2520LICENSE%250AEncoding%253A%2520UTF-8%250ALazyData%253A%2520true%250ARoxygenNote%253A%25206.1.0%250AImports%253A%2520R6%252C%2520clipr%252C%2520magick%252C%2520wdman%252C%2520RSelenium%252C%2520utils%252C%2520httr%252C%2520rtweet%252C%2520yaml%250ASuggests%253A%2520testthat%252C%2520covr%252C%2520knitr%252C%2520rmarkdown%250AURL%253A%2520https%253A%252F%252Fgithub.com%252Fyonicd%252Fcarbonate%250ABugReports%253A%2520https%253A%252F%252Fgithub.com%252Fyonicd%252Fcarbonate%252Fissues%250ARoxygen%253A%2520list(markdown%2520%253D%2520TRUE)%250AVignetteBuilder%253A%2520knitr%250AAuthor%253A%2520Jonathan%2520Sidi%2520%255Baut%252C%2520cre%255D%2520(%253Chttps%253A%252F%252Forcid.org%252F0000-0002-4222-1819%253E)%250AMaintainer%253A%2520Jonathan%2520Sidi%2520%253Cyonicd%2540gmail.com%253E%250ABuilt%253A%2520R%25203.5.1;%2520;%25202018-10-28%252015%253A50%253A25%2520UTC;%2520unix&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Click the &lt;a href=&#34;https://carbon.now.sh/?bg=rgba(171%2C175%2C195%2C0.7)&amp;amp;t=panda-syntax&amp;amp;wt=none&amp;amp;l=r&amp;amp;ds=true&amp;amp;dsyoff=20px&amp;amp;dsblur=68px&amp;amp;wc=true&amp;amp;wa=true&amp;amp;pv=11px&amp;amp;ph=14px&amp;amp;ln=false&amp;amp;fm=Fira%20Code&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=1x&amp;amp;wm=false&amp;amp;ts=false&amp;amp;code=Package%253A%2520carbonate%250ATitle%253A%2520Interact%2520with%2520%27carbon.js%27%250AVersion%253A%25200.1.0%250AAuthors%2540R%253A%2520person(given%2520%2520%253D%2520%2522Jonathan%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520family%2520%2520%253D%2520%2522Sidi%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520email%2520%2520%2520%253D%2520%2522yonicd%2540gmail.com%2522%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520role%2520%2520%2520%2520%253D%2520c(%2522aut%2522%252C%2520%2522cre%2522)%252C%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520comment%2520%253D%2520c(ORCID%2520%253D%2520%25220000-0002-4222-1819%2522))%250ADescription%253A%2520Create%2520beautiful%2520images%2520of%2520source%2520code%2520using%2520%27carbon.js%27%253Chttps%253A%252F%252Fcarbon.now.sh%252Fabout%253E.%250ADepends%253A%2520R%2520(%253E%253D%25203.2.0)%250ALicense%253A%2520MIT%2520%252B%2520file%2520LICENSE%250AEncoding%253A%2520UTF-8%250ALazyData%253A%2520true%250ARoxygenNote%253A%25206.1.0%250AImports%253A%2520R6%252C%2520clipr%252C%2520magick%252C%2520wdman%252C%2520RSelenium%252C%2520utils%252C%2520httr%252C%2520rtweet%252C%2520yaml%250ASuggests%253A%2520testthat%252C%2520covr%252C%2520knitr%252C%2520rmarkdown%250AURL%253A%2520https%253A%252F%252Fgithub.com%252Fyonicd%252Fcarbonate%250ABugReports%253A%2520https%253A%252F%252Fgithub.com%252Fyonicd%252Fcarbonate%252Fissues%250ARoxygen%253A%2520list(markdown%2520%253D%2520TRUE)%250AVignetteBuilder%253A%2520knitr%250AAuthor%253A%2520Jonathan%2520Sidi%2520%255Baut%252C%2520cre%255D%2520(%253Chttps%253A%252F%252Forcid.org%252F0000-0002-4222-1819%253E)%250AMaintainer%253A%2520Jonathan%2520Sidi%2520%253Cyonicd%2540gmail.com%253E%250ABuilt%253A%2520R%25203.5.1;%2520;%25202018-10-28%252015%253A50%253A25%2520UTC;%2520unix&#34;&gt;link&lt;/a&gt; to see the URI works.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;manipulate-the-carbon-object&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Manipulate the carbon object&lt;/h3&gt;
&lt;p&gt;What make carbon.js really nice that you can control all the aesthetics of the image.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;16%&#34; /&gt;
&lt;col width=&#34;48%&#34; /&gt;
&lt;col width=&#34;24%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Carbon Variable&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Carbonate Variable&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;l&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;language&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;language&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;bg&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;palette&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;layout pallete (vector with c(r,g,b,a)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;c(r=171,g=184,b=195,a=1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;t&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;template&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;layout template (listed in get_templates())&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;‚Äòseti‚Äô&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;wc&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add_window_control&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add/remove window controls (circles on top left corner)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;wt&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;window_control_theme&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;change window control themes (listed in get_windows_control_themes())&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;‚Äònone‚Äô&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;ds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add_drop_shadow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add/remove dropshadow&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;dsyoff&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;drop_shadow_offset_y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;shadow vertical offset (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;dsblur&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;drop_shadow_blur_radius&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;shadow blur radius (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;wa&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;auto_adjust_width&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;auto-audjust output width&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;pv&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;padding_vertical&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;vertical padding (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;ph&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;padding_horizontal&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;horizontal padding (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;ln&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add_line_number&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add/remove line numbers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;fm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;font_family&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;layout font family (listed in get_font_families())&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;‚ÄòHack‚Äô&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;fs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;font_size&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;font size (px)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;lh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;line_height_percent&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;relative space between lines (percent)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;133&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;si&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;square_image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;output image is square&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;es&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;relative_export_size&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image size in export relative to what is in the preview (1,2 or 4)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;wm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add_watermark&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add official carbon.js watermark&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;default&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Default&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$carbonate(file = &amp;#39;myfile.png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-29-carbonate_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;452&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;changing-the-template&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Changing the template&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$template &amp;lt;-&amp;#39;cobalt&amp;#39;
x$carbonate(file = &amp;#39;new_template.png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-29-carbonate_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;452&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;changing-the-font&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Changing the font&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$font_family &amp;lt;-&amp;#39;IBM Plex Mono&amp;#39;
x$carbonate(file = &amp;#39;new_font.png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-29-carbonate_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;452&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;sharing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sharing&lt;/h2&gt;
&lt;div id=&#34;tinyurl&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Tinyurl&lt;/h3&gt;
&lt;p&gt;You can also put a tinyurl link as a watermark on the image produced that will open to the &lt;a href=&#34;carbon.now.sh&#34; class=&#34;uri&#34;&gt;carbon.now.sh&lt;/a&gt; page that has the code in the image.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$add_tinyurl &amp;lt;- TRUE
x$carbonate(file = &amp;#39;tiny_url.png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default the watermark is placed on the bottom left corner.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-29-carbonate_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;452&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you just want the tinyurl link without the image to use in a tweet you can create it using&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$tiny()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## [1] &amp;quot;http://tinyurl.com/y7c64uyv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can put the link directly on your clipboard&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$tiny(clip = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## [1] &amp;quot;http://tinyurl.com/y7c64uyv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clipr::read_clip()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## [1] &amp;quot;http://tinyurl.com/y7c64uyv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;twitter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Twitter&lt;/h3&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
üì∞ Hot off the press! Grab a tinyurl from &lt;a href=&#34;https://twitter.com/yoniceedee?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@yoniceedee&lt;/span&gt;&lt;/a&gt;&#39;s üì¶&lt;br&gt;Sharing pretty code is easy as ü•ß&lt;br&gt;üîó &lt;a href=&#34;https://t.co/aDdvd4qqIH&#34;&gt;https://t.co/aDdvd4qqIH&lt;/a&gt; &lt;a href=&#34;https://t.co/c10cOq6VNF&#34;&gt;pic.twitter.com/c10cOq6VNF&lt;/a&gt;
&lt;/p&gt;
‚Äî We are R-Ladies (&lt;span class=&#34;citation&#34;&gt;@WeAreRLadies&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/WeAreRLadies/status/1034969993883144194?ref_src=twsrc%5Etfw&#34;&gt;August 30, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;direct&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Direct&lt;/h5&gt;
&lt;p&gt;You can also directly tweet the image. An automatic status is created with two options&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default
&lt;ul&gt;
&lt;li&gt;Created in R using the Carbonate üì¶&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;add_tinyurl &amp;lt;- TRUE&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Created in R using the Carbonate üì¶
Check out this script at üîó &lt;a href=&#34;http://tinyurl.com/yavh2yux&#34; class=&#34;uri&#34;&gt;http://tinyurl.com/yavh2yux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Manual
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;tweet_status&lt;/code&gt; you can write your own status.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- carbonate::carbon$new()
x$tweet &amp;lt;- TRUE
x$carbonate()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;post-process-batch&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Post process (Batch)&lt;/h5&gt;
&lt;p&gt;If you have images stored in &lt;code&gt;x$carbons&lt;/code&gt; you can post them also in a tweet using.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# for multiple png attachments
x$rtweet(x$carbons,media_type = &amp;#39;png&amp;#39;) #using default status

# subsets of images
x$rtweet(status=&amp;#39;These are images&amp;#39;,x$carbons[c(1,3)],media_type = &amp;#39;png&amp;#39;)

# for gifs
x$rtweet(status=&amp;#39;This is a gif&amp;#39;, x$carbons,media_type = &amp;#39;gif&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reprex-gist&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reprex + Gist&lt;/h3&gt;
&lt;p&gt;Finally, thanks to a suggestion from &lt;a href=&#34;https://twitter.com/ma_salmon&#34;&gt;Maelle Salmon&lt;/a&gt; to use &lt;a href=&#34;https://github.com/maelle/reprex_demo&#34;&gt;carbonate with gist and reprex&lt;/a&gt;, now you can create and tweet out the reprex using carbon images linked to your Gist.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reprex::reprex(plot(1:10),
               outfile = &amp;quot;demo_carbonate&amp;quot;,
               venue = &amp;quot;r&amp;quot;)

gistr::gist_auth(reauth = TRUE)

gist_out &amp;lt;- gistr::gist_create(&amp;#39;demo_carbonate_reprex.md&amp;#39;,browse = FALSE)

x &amp;lt;- carbonate::carbon$new(readLines(&amp;#39;demo_carbonate_reprex_rendered.R&amp;#39;))

x$carbonate(code = clipr::read_clip())

x$carbons &amp;lt;- append(x$carbons,
                    magick::image_read(&amp;#39;demo_carbonate_reprex_files/figure-markdown_strict/reprex-body-1.png&amp;#39;)
                    )
x$rtweet(
  media = x$carbons,
  status = glue::glue(&amp;quot;gistr + carbonate #rstats
                      {emo::ji(&amp;#39;link&amp;#39;)} {tinyurl(gist_out$html_url)}&amp;quot;),
  media_format = &amp;#39;png&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;ro&#34; dir=&#34;ltr&#34;&gt;
gistr + carbonate &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt;&lt;br&gt;üîó &lt;a href=&#34;https://t.co/XWMHOe2DSc&#34;&gt;https://t.co/XWMHOe2DSc&lt;/a&gt; &lt;a href=&#34;https://t.co/zbxphOS0gW&#34;&gt;pic.twitter.com/zbxphOS0gW&lt;/a&gt;
&lt;/p&gt;
‚Äî yoni sidi (&lt;span class=&#34;citation&#34;&gt;@yoniceedee&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/yoniceedee/status/1056587571042705410?ref_src=twsrc%5Etfw&#34;&gt;October 28, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RStudio Addin Manager</title>
      <link>/post/rsam/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/rsam/</guid>
      <description>&lt;p&gt;&lt;code&gt;rsam&lt;/code&gt; provides a command line and user interface to manage RStudio addins. You can show or hide the addins in the RStudio IDE dropdown menu and set keyboard shortcuts for them.&lt;/p&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Since &lt;code&gt;rsam&lt;/code&gt; manages the RStudio addins it must write to disk. For this reason the package cannot be hosted on &lt;a href=&#34;https://cran.r-project.org/web/packages/rsam/index.html&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;#39;remotes&amp;#39;)
remotes::install_github(&amp;#39;yonicd/rsam&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;usage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rsam)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## rsam persmissions set by ~/_rsam.yml&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;user-interface&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;User Interface&lt;/h3&gt;
&lt;p&gt;The user interface is a shiny application that uses &lt;a href=&#34;http://jrowen.github.io/rhandsontable/&#34;&gt;rhandshontable&lt;/a&gt; to interact with the addins. The table includes a list of all the installed addins found in the &lt;code&gt;.libPaths()&lt;/code&gt;, their description, a checkbox to control if the addin will be shown in the IDE dropdown menu and a column to define keyboard shortcuts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#invoking the UI
rsam()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have decided which addins to toggle on or off you press the &lt;code&gt;update&lt;/code&gt; button. This will update the RStudio files. The final (currently unavoidable) step is to restart RStudio to invoke the changes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/blog/master/img/rsamUI.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;command-line&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Command Line&lt;/h3&gt;
&lt;p&gt;Via the command line you can manage the addins with greater flexibility.&lt;/p&gt;
&lt;div id=&#34;retrieve-summary-of-installed-addins&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Retrieve Summary of Installed Addins&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dplyr::as_tibble(fetch_addins())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 58 x 8
##    Package  Name  Description  Binding Interactive Key   libpath  Shortcut
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   
##  1 blogdown Serv‚Ä¶ &amp;quot;Run blogdo‚Ä¶ serve_‚Ä¶ true        blog‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
##  2 blogdown New ‚Ä¶ Create a ne‚Ä¶ new_po‚Ä¶ true        blog‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
##  3 blogdown Upda‚Ä¶ &amp;quot;Update the‚Ä¶ update‚Ä¶ true        blog‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
##  4 blogdown Inse‚Ä¶ Insert an e‚Ä¶ insert‚Ä¶ true        blog‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
##  5 blogdown Touc‚Ä¶ &amp;quot;Change the‚Ä¶ touch_‚Ä¶ false       blog‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
##  6 blogdown Quot‚Ä¶ &amp;quot;Add &amp;gt; to t‚Ä¶ quote_‚Ä¶ false       blog‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
##  7 bookdown Prev‚Ä¶ Run bookdow‚Ä¶ serve_‚Ä¶ true        book‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
##  8 bookdown Inpu‚Ä¶ Input math ‚Ä¶ mathqu‚Ä¶ true        book‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
##  9 clipr    Valu‚Ä¶ &amp;quot;Copies the‚Ä¶ clipr_‚Ä¶ false       clip‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
## 10 clipr    Outp‚Ä¶ &amp;quot;Copies the‚Ä¶ clipr_‚Ä¶ false       clip‚Ä¶ /Users/‚Ä¶ &amp;lt;NA&amp;gt;    
## # ... with 48 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;toggle-addins-onoff&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Toggle Addins on/off&lt;/h4&gt;
&lt;p&gt;Every time a binding is passed to the &lt;code&gt;toggle_addin&lt;/code&gt; function it will switch states.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;toggle_addin(key = c(&amp;quot;blogdown::serve_site&amp;quot;,&amp;quot;blogdown::new_post_addin&amp;quot;,&amp;quot;blogdown::update_meta_addin&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;building-keyboard-shortcuts&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Building Keyboard Shortcuts&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;rsam&lt;/code&gt; has a validation for keyboard keys through the class &lt;code&gt;key&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;KEYS$`left command/window key`&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Command&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;character&amp;quot; &amp;quot;key&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;KEYS$shift&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Shift&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;character&amp;quot; &amp;quot;key&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;KEYS$i&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;I&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;character&amp;quot; &amp;quot;key&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;key &amp;lt;- KEYS$`left command/window key` + KEYS$shift + KEYS$i

key&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Command+Shift+I&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;set-keyboard-shortcut-for-addins&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Set Keyboard Shortcut for Addins&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set_shortcut(fn = &amp;#39;blogdown::serve_site&amp;#39;,shortcut = key)

#if the binding already has a shortcut mapped to it `overide` must be TRUE
set_shortcut(fn = &amp;#39;blogdown::serve_site&amp;#39;,shortcut = key, overide = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;remove-keyboard-shortcut-for-addins&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Remove Keyboard Shortcut for Addins&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm_shortcut(fn = &amp;#39;blogdown::serve_site&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;limited-liability-addins&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Limited Liability Addins&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rsam&lt;/code&gt; gives you 3 empty addins to pass into them whatever you want and run them as your personal addins. You can also set keyboard shortcuts for each one with &lt;code&gt;set_shortcut&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pass through an expression wrapped the global objects &lt;code&gt;rsam_fn_1()&lt;/code&gt;, &lt;code&gt;rsam_fn_2()&lt;/code&gt;, and &lt;code&gt;rsam_fn_3()&lt;/code&gt; into the Rstudio Addin list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rsam_fn_1 &amp;lt;- function(){
  library(ggplot2)
  library(dplyr)
  
  iris%&amp;gt;%ggplot(aes(x=Sepal.Length,y=Sepal.Width)) + geom_point()
}

# Change shortcuts to whatever you want

keys &amp;lt;- KEYS$`left command/window key` + KEYS$shift + KEYS$l

rsam::set_shortcut(fn = &amp;#39;rsam::lla1&amp;#39;,shortcut = keys + KEYS$`1`)

rsam::set_shortcut(fn = &amp;#39;rsam::lla2&amp;#39;,shortcut = keys + KEYS$`2`)

rsam::set_shortcut(fn = &amp;#39;rsam::lla3&amp;#39;,shortcut = keys + KEYS$`3`)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Firearms Sourced and Recovered in the United States and Territories 2010-2016</title>
      <link>/post/2017-11-07-gunflow/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-11-07-gunflow/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I want to try and probe a question that was raised since Las Vegas and now revived due to the tragedy in Sutherland Springs,TX: Given the free trade between states, can a state unilaterally regulate firearms. This post will try to start to give an answer to this question using R.&lt;/p&gt;
&lt;p&gt;Since there is not an open electronic federal database for firearm ownership and transactions, one important source of information is the &lt;a href=&#34;https://www.atf.gov/resource-center/firearms-trace-data-2016&#34;&gt;Bureau of Alcohol, Tobacco and Firearms&lt;/a&gt;, (ATF). They publish the trace of firearms that were recovered every year, and when &lt;em&gt;possible&lt;/em&gt; trace the state where the firearm originated. This creates a weighted adjaceny matrix that is similar to what in economics is called &lt;a href=&#34;http://www.imf.org/external/pubs/cat/longres.aspx?sk=20096&#34;&gt;Direction of Trade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this &lt;a href=&#34;https://www.atf.gov/docs/undefined/sourcerecoverybystatecy2016xlsx/download&#34;&gt;matrix&lt;/a&gt; the rows depict the source and the columns depict the destination. This lets one get an idea where firearms that are confiscated by the ATF orginated from. From this we can also infer which states are net importers of firearms and which states are net exporters.
I will explore this matrix in an attempt to better understand if firearms are more likely to flow between geographically adjacent states. In the end I will get to a shiny app that ties everything together, for those who want to stop here‚Ä¶&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/gunflow_slick.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The shiny app can be run directly&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pkgs &amp;lt;- c(&amp;#39;reshape2&amp;#39;,&amp;#39;geojson&amp;#39;,&amp;#39;readxl&amp;#39;,&amp;#39;leaflet&amp;#39;,
&amp;#39;httr&amp;#39;,&amp;#39;rgeolocate&amp;#39;,&amp;#39;shiny&amp;#39;,&amp;#39;ggplot2&amp;#39;,&amp;#39;sp&amp;#39;,
&amp;#39;widyr&amp;#39;,&amp;#39;igraph&amp;#39;,&amp;#39;slickR&amp;#39;,&amp;#39;ggraph&amp;#39;,&amp;#39;svglite&amp;#39;,&amp;#39;dplyr&amp;#39;)

check &amp;lt;- sapply(pkgs,require,warn.conflicts = TRUE,character.only = TRUE)

if( any(!check) ) {
  
  pkgs.missing &amp;lt;- pkgs[!check]
  install.packages(pkgs.missing)
  invisible(sapply(pkgs.missing,
                   require,
                   warn.conflicts = TRUE,
                   character.only = TRUE)
            )
}

shiny::runGitHub(&amp;#39;yonicd/gunflow&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or accessed through &lt;a href=&#34;https://ysidi.shinyapps.io/gunflow/&#34;&gt;shinyapps.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please deploy from R console as to not deplete the account on shinyapps.io. Thank you!&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;data-sources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data sources&lt;/h2&gt;
&lt;p&gt;We read in the data sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;us-states.geojson: for the leaflet,&lt;/li&gt;
&lt;li&gt;gun_mat: weighted adjency matrices from the ATF site&lt;/li&gt;
&lt;li&gt;atf_data: total firearm registration with adult state population to calculate ratios per 100 persons.&lt;/li&gt;
&lt;li&gt;gun_ranking: State firearm regulation ranking from the &lt;a href=&#34;http://lawcenter.giffords.org/scorecard/&#34;&gt;Law Center To Prevent Gun Violence&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the raw data can be found in the project home repo &lt;a href=&#34;https://github.com/yonicd/gunflow&#34; class=&#34;uri&#34;&gt;https://github.com/yonicd/gunflow&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states &amp;lt;- geojsonio::geojson_read(&amp;#39;https://github.com/yonicd/gunflow/blob/master/www/us-states.geojson?raw=true&amp;#39;, what = &amp;quot;sp&amp;quot;)
f &amp;lt;- tempfile()
for(FILE in c(&amp;#39;gun_mat&amp;#39;,&amp;#39;atf_data&amp;#39;,&amp;#39;gun_ranking&amp;#39;)){
download.file(sprintf(&amp;#39;https://github.com/yonicd/gunflow/blob/master/www/%s.rda?raw=true&amp;#39;,FILE),destfile = f)
load(f)
}
unlink(f)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;helper-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Helper functions&lt;/h2&gt;
&lt;p&gt;To save some space we load helper functions from the &lt;a href=&#34;https://github.com/yonicd/gunflow&#34;&gt;project repo&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
source(&amp;#39;https://github.com/yonicd/gunflow/blob/master/funs.R?raw=true&amp;#39;)

plot_size = 7

capitalize=function(x){
  gsub(&amp;quot;(^|[[:space:]])([[:alpha:]])&amp;quot;, &amp;quot;\\1\\U\\2&amp;quot;, x, perl=TRUE)
}

net_flow &amp;lt;- calc(side = &amp;#39;from&amp;#39;)%&amp;gt;%
  left_join(calc(side = &amp;#39;to&amp;#39;),by=c(&amp;#39;year&amp;#39;,&amp;#39;state&amp;#39;))%&amp;gt;%
  mutate(net=state_sum_from-state_sum_to,
         ratio_net=ratio_from-ratio_to)%&amp;gt;%
  arrange(desc(ratio_net))

network_dat &amp;lt;- net_dat(gun_mat)
tot &amp;lt;- scatter_fun(gun_mat)
tot &amp;lt;- tot%&amp;gt;%mutate(state=as.character(state))%&amp;gt;%left_join(gun_ranking,by=c(&amp;#39;year&amp;#39;,&amp;#39;state&amp;#39;))

tot$state_grade &amp;lt;- gsub(&amp;#39;NA&amp;#39;,&amp;#39;&amp;#39;,paste(tot$state,tot$grade,tot$smart_law))
tot$grade_round &amp;lt;- gsub(&amp;#39;[+-]&amp;#39;,&amp;#39;&amp;#39;,tot$grade)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;leaflet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Leaflet&lt;/h2&gt;
&lt;p&gt;The leafet is a great way to show interactively an adjacency matrix. To reproduce this map use the script &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/leaflet.R&#34;&gt;here&lt;/a&gt;. In the following output, when hovering above a state you can see information regarding the total firearms recovered in Connecticut, the total amount of firearms imorted into Connecticut in 2016 and what percent each state is of the imported total.In the shiny app you can control what state is selected and if the direction of flow is importing or exporting, as well if the colour scale is on the state level of national level.&lt;/p&gt;
&lt;p&gt;In the app it is easy to see that since the Sandy Hook mass shooting high regulation has caused a large net inflow of firearms into Connecticut. Since these are only the recovered firearms by authorities it is a proxy of the amount of weapons entering the state from other states.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2017-11-07-gunflow_files/figure-html//widgets/widget_unnamed-chunk-5.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;trends-of-firearm-registration-2010-2016&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Trends of firearm registration 2010-2016&lt;/h2&gt;
&lt;p&gt;In the exploratory graphs first we check what states are trending up or down with regards to firearms registration. We calculate the ratios per 100 adults to make it possible to compare across states.&lt;/p&gt;
&lt;p&gt;We then create two plots one shows the trends on the scale of the ratios per 100 adults and another with the percent change from 2010 (base year), so we can compare across states and years. Code to create plots can be found &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/trends.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What we find can see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wyoming needed to be removed from the plots because it so skewed the y-axis with a rate of 30 registered per 100 adults in 2016.&lt;/li&gt;
&lt;li&gt;New Hampshire has increased the rate of firearms per 100 adults from 3 in 2015 to 6 in 2016.&lt;/li&gt;
&lt;li&gt;The geographic region that has the highest rate is the Mountain geographic area that includes: Idaho, New Mexico, Nevada, Arizona and Utah&lt;/li&gt;
&lt;li&gt;16 States have at least 100% increase in gun registration since 2010.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/blog/master/img/gunflow/atf_plot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/blog/master/img/gunflow/atf_base_plot.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;net-flow-per-100-firearms-between-states&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Net flow per 100 firearms between states&lt;/h2&gt;
&lt;p&gt;We move on to the adjacency matrices showing the firearms found by the ATF. The script the plot for 2016 can be found &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/net_flow.R&#34;&gt;here&lt;/a&gt;. We calculate the outflow rate per 100 firearms per state and the inflow rate per 100 firearms and the subtract the two to get the net flow per 100 firearms. A high positive number depicts a net exporter of firearms and a low negative number depicts a net importer of firearms. The gif below animates how this metric changes from 2011-2016.&lt;/p&gt;
&lt;p&gt;What we see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Washington DC and Puerto Rico have moved from strong net exporters to the top net importers of firearms.&lt;/li&gt;
&lt;li&gt;Since 2014 New England has become a strong net exporter of firearms.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/net_flow.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;firearms-flow-relationship&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Firearms Flow relationship&lt;/h2&gt;
&lt;p&gt;Next we combine the firearms flow with the regulation grades for each state 2011-2016, and give a colour for each node as the number of firearms recovered within the state and it was registered to someone in the state. The script to recreate these plots can be found &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/scatter.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here we start to see that states with high regulation tend to be high net importers of firearms.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/scatter_flow.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;state-firearm-flow-networks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;State Firearm flow networks&lt;/h2&gt;
&lt;p&gt;To find clusters of states that have a high degree of correlation among each other and locate states that are conduits between geographical areas we use visualize the weighted adjaceny matrix as a network. The script to create these plots can be found &lt;a href=&#34;https://github.com/yonicd/gunflow/blob/master/funs.R&#34;&gt;here&lt;/a&gt;. We can see over time that the network has become more connected and clusters of states have been connected across geographical regions, with Tennesee and Michigan being having a central role in these connections.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/net_plot.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;power-centrality&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Power Centrality&lt;/h2&gt;
&lt;p&gt;Finally we try and see if we can locate states that have a strong centrality power with the networks. We use the Bonacichi centrality metric to rate both the states that have high centrality because they are connected to states with that have themselves many connections (a cooperative relationship). Inversely we also measure states that are have a high centrality measure because states that are connected to them lack connections and depened on the state for firearms (an antagonistic relationship). The script to create these plots can be found &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/power.R&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/power.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This exploratory analysis attempted to start to answer the question can states unilaterally regulate firearms effictively. My impression is that it is nearly impossible to do so when neighboring states do not share the same regulatory framework. This manifests itself in changes of interstate firearm flow to reach a new steady state of firearms regardless of within state regulation.&lt;/p&gt;
&lt;p&gt;Hopefully this will be a good starting point for some modeling of firearm flow between states and developing more effective state and federal policy through the prediction of the flow of firearms between states.&lt;/p&gt;
&lt;p&gt;Any thoughts on the analysis is always welcome, especially if you think I erred in any way, or want have any ideas on how to model such a problem.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Extending slackr</title>
      <link>/post/slackr/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/slackr/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/hrbrmstr/slackr&#34;&gt;slackr&lt;/a&gt; package, by &lt;a href=&#34;https://rud.is/b/&#34;&gt;Bob Rudis&lt;/a&gt;, contains functions that make it possible to interact with the Slack messaging platform. The great part of Slack is that it has mobile devices application interface. We take advantage of this by extending slackr‚Äôs interaction with the server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Write&lt;/strong&gt; to a channel (current) - &lt;code&gt;slackr&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Compile TeX snippets directly to a channel - &lt;code&gt;tex_slackr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tex_slackr(xtable::xtable(mtcars))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This function uses the &lt;a href=&#34;https://github.com/metrumresearchgroup/texPreview&#34;&gt;texPreview&lt;/a&gt; package to compile and generate the TeX output.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt; channel history (new) - &lt;code&gt;history_slackr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit&lt;/strong&gt; messages on a channel (new) - &lt;code&gt;edit_slackr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delete&lt;/strong&gt; channel messages (new) - &lt;code&gt;delete_slackr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This lets us interact with R and Slack in new ways, by getting active updates on long simulations directly to your (and your team‚Äôs) mobile device and multitask away from your computer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;#39;hrbrmstr/slackr&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;progress-bars&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Progress Bars&lt;/h2&gt;
&lt;p&gt;Create text progress bar that is sent directly to a Slack channel.&lt;/p&gt;
&lt;p&gt;&lt;img width=&#34;500px&#34; height=&#34;auto&#34; src=&#34;https://raw.githubusercontent.com/yonicd/blog/master/img/slackr/slackr_progress.gif&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;progress_slackr &amp;lt;- function(x){
  text_slackr(&amp;#39;0%&amp;#39;)
  s &amp;lt;- c(0,x,1)
  for(i in 1:length(s)){
    Sys.sleep(0.5)
    edit_slackr(sprintf(&amp;#39;%s%%&amp;#39;,round(100*i/length(s),1)))
  }
  Sys.sleep(0.5)
}

set.seed(1234)
progress_slackr(sort(runif(10)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This also solves a long standing problem of tracking the progress of parallel jobs on a server. We use slackr with the &lt;a href=&#34;https://bitbucket.org/metrumrg/qapply/src&#34;&gt;qapply&lt;/a&gt; package, which runs jobs on an Open Grid Scheduler/Engine. We can track each node&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/blog/master/img/slackr/slackr_qapply.gif&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;onexit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Onexit&lt;/h2&gt;
&lt;p&gt;Attach &lt;code&gt;on.exit&lt;/code&gt; expressions to any function in R and at the end of the original function an output will be sent to the Slack channel.&lt;/p&gt;
&lt;p&gt;This is useful for letting you know when a simulation is done, but also to be able to send to the Slack channel a relevant summary to see that the simulation did as intended.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/blog/master/img/slackr/slackr_expr.gif&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ctl &amp;lt;- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt &amp;lt;- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group &amp;lt;- gl(2, 10, 20, labels = c(&amp;quot;Ctl&amp;quot;,&amp;quot;Trt&amp;quot;))
weight &amp;lt;- c(ctl, trt)

#pass a message to Slack channel &amp;#39;general&amp;#39;
register_onexit(lm,&amp;#39;bazinga!&amp;#39;,channel=&amp;quot;#general&amp;quot;)

lm.D9 &amp;lt;- slack_lm(weight ~ group)

#test that output keeps inheritance
summary(lm.D9)

#pass a message to Slack channel &amp;#39;general&amp;#39; with a header message to begin output
register_onexit(lm,&amp;#39;bazinga!&amp;#39;,
channel=&amp;quot;#general&amp;quot;,
header_msg=&amp;#39;This is a message to begin&amp;#39;)

lm.D9 &amp;lt;- slack_lm(weight ~ group)

#onexit with an expression that calls lm.plot
register_onexit(lm,{
 par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
 plot(z)
},
channel=&amp;quot;#general&amp;quot;,
header_msg = &amp;#39;This is a plot just for this output&amp;#39;,
use_device = TRUE)

lm.D9 &amp;lt;- slack_lm(weight ~ group)

#clean up slack channel from examples
delete_slackr(count = 6,channel = &amp;#39;#general&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>jsTree htmlwidget</title>
      <link>/post/jstree/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/jstree/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;jsTree is a R package that is a standalone htmlwidget for the jsTree JavaScript library. It can be run from the R console directly into the Rstudio Viewer, be used in a Shiny application or be part of an Rmarkdown html output.&lt;/p&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#CRAN
install.packages(&amp;#39;jsTree&amp;#39;)

#Github
devtools::install_github(&amp;#39;metrumresearchgroup/jsTree&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The motivation for the package came from the &lt;a href=&#34;https://github.com/trestletech/shinyTree&#34;&gt;shinyTree&lt;/a&gt; by Jeff Allen, which has an early version of the JavaScript library hardcoded into a Shiny application.&lt;/p&gt;
&lt;p&gt;The input for the htmlwidget is a character vector and the heirarchy is set by the ‚Äò/‚Äô, as to mimic the delimiter of a file path.&lt;/p&gt;
&lt;p&gt;The main purpose of this package is vizualize folder hierarchy, much like in the &lt;code&gt;Files&lt;/code&gt; tab in RStudio. But, instead of looking in local directories it will be used for remote repositories, such as github, bitbucket and svn repositories. This is implemented in the &lt;a href=&#34;https://github.com/metrumresearchgroup/vcs&#34;&gt;vcs&lt;/a&gt; package and a future post will show utility that package gives.&lt;/p&gt;
&lt;p&gt;To show the basic functionality of jsTree we will use a dataset that contains all superfund sites from the &lt;a href=&#34;https://www.epa.gov/superfund/search-superfund-sites-where-you-live&#34;&gt;EPA&lt;/a&gt;. You can access the tibble &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/data/superfundsite.Rds&#34;&gt;here&lt;/a&gt;. The data&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(htmlTable)
library(jsTree)
library(widgetframe)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Read in the data
superfundsite &amp;lt;- readRDS(&amp;#39;../../jstree_data/superfundsite.Rds&amp;#39;)

htmlTable::htmlTable(head(superfundsite),rnames=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;gmisc_table&#34; style=&#34;border-collapse: collapse; margin-top: 1em; margin-bottom: 1em;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
Region
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
State
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
City
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
County
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
Zip Code
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
Site Name
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Massachusetts
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
ACTON
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
MIDDLESEX
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01720
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
W.R. GRACE &amp;amp; CO., INC. (ACTON PLANT)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Massachusetts
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
AMESBURY
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
ESSEX
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01913
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
MICROFAB INC (FORMER)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Massachusetts
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
ASHLAND
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
MIDDLESEX
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01721
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
NYANZA CHEMICAL WASTE DUMP
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Massachusetts
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
ATTLEBORO
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
BRISTOL
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
02703
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
WALTON &amp;amp; LONSBURY INC.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Maine
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
AUGUSTA
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
KENNEBEC
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
04330
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
O‚ÄôCONNOR CO.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
Connecticut
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
BARKHAMSTED
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
LITCHFIELD
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
06063
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
BARKHAMSTED-NEW HARTFORD LANDFILL
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-usage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Usage&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# collapse columns to be delimited by &amp;#39;/&amp;#39;
myx &amp;lt;- apply(superfundsite,1,function(x) paste(x,collapse = &amp;#39;/&amp;#39;))

# call jsTree
j0 &amp;lt;- jsTree(obj = myx)

# place widget in iframe to use in blog post 
# (not needed in regular usage)
frameWidget(j0)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2017-10-24-jstree_files/figure-html//widgets/widget_ex0.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;initialize-tree-with-checked-boxes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initialize tree with checked boxes&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nodestate1 &amp;lt;- superfundsite$State==&amp;#39;California&amp;#39;

j1 &amp;lt;- jsTree(myx,nodestate=nodestate1)

frameWidget(j1)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2017-10-24-jstree_files/figure-html//widgets/widget_ex1.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;tooltips&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tooltips&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use the zipcode as a tooltip on the county name

myx2 &amp;lt;- apply(superfundsite[,-c(5)],1,paste,collapse=&amp;#39;/&amp;#39;)

zipcode_label &amp;lt;- superfundsite$`Zip Code`
names(zipcode_label) &amp;lt;- superfundsite$County

j2 &amp;lt;- jsTree(myx2,tooltips = zipcode_label)

frameWidget(j2)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2017-10-24-jstree_files/figure-html//widgets/widget_ex2.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;shiny&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shiny&lt;/h2&gt;
&lt;p&gt;jsTree can be used in Shiny applications and supplies observers so the Shiny can react to the tree.&lt;/p&gt;
&lt;iframe src=&#34;https://tranquil-escarpment-51788.herokuapp.com/&#34; style=&#34;width: 800px; height: 500px&#34;&gt;
&lt;/iframe&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- shiny::fluidPage(
  
  shiny::column(width=4,jsTree::jsTreeOutput(&amp;#39;tree&amp;#39;)),
  
  shiny::column(width=8,shiny::uiOutput(&amp;#39;chosen&amp;#39;))
  
)

server &amp;lt;- function(input, output,session) {
  
  network &amp;lt;- shiny::reactiveValues()
  
  shiny::observeEvent(input$tree_update,{
    
    current_selection &amp;lt;- input$tree_update$.current_tree
    if(!is.null(current_selection)) 
      network$tree &amp;lt;- jsonlite::fromJSON(current_selection)
    
  })
  
  shiny::observeEvent(network$tree,{
    
    output$results &amp;lt;- shiny::renderPrint({
      
      str.out &amp;lt;- &amp;#39;&amp;#39;
      
      if(length(network$tree)&amp;gt;0)
        str.out=network$tree
      
      return(str.out)
    })    
  })
  
  output$chosen &amp;lt;- shiny::renderUI({
    
    list(shiny::h3(&amp;#39;Selected Items&amp;#39;),
         
    shiny::verbatimTextOutput(outputId = &amp;quot;results&amp;quot;))
    
  })
  
  output$tree &amp;lt;- jsTree::renderJsTree({
    
    nested_string &amp;lt;- myx
    
    jsTree(nested_string)
    
  })
  
}

shinyApp(ui, server)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Combining Github Traffic Plots Across Repositories</title>
      <link>/post/2017-10-02-githubtraffic/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-10-02-githubtraffic/</guid>
      <description>

&lt;p&gt;This post will show how to use the &lt;a href=&#34;https://cran.r-project.org/web/packages/RSelenium/vignettes/RSelenium-basics.html&#34;&gt;RSelenium&lt;/a&gt; package to scrape your own github account to retrieve all that fun traffic data of clones and visits and create a single traffic plot for your account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/gh_traffic.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For the single file you can find it in this &lt;a href=&#34;https://gist.github.com/yonicd/a05c4d85f7884c517a6cfa6aff24f59a&#34;&gt;gist&lt;/a&gt; file.&lt;/p&gt;

&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(RSelenium)
library(XML)
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fill in the relevant information for your account. The team is usually your username, but it can be different. The repos can be a vector and since we are going in the front door of the site we can access the private repositories too!&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gh_user &amp;lt;- &#39;&amp;lt;your github login name&amp;gt;&#39;
gh_pass &amp;lt;- &#39;&amp;lt;your github login password&amp;gt;&#39;

gh_team &amp;lt;- &#39;&amp;lt;team associated with account&amp;gt;&#39;
repos &amp;lt;- &#39;&amp;lt;repositories in team&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-function&#34;&gt;The function&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;github_traffic &amp;lt;- function(gh_user,gh_pass,gh_team,repos){

#open the connection

rD &amp;lt;- RSelenium::rsDriver(verbose = FALSE)
remDr &amp;lt;- rD[[&amp;quot;client&amp;quot;]]

#going to the first repo to invoke the login

remDr$navigate(sprintf(&#39;https://github.com/%s/%s/graphs/traffic&#39;,gh_team,repos[1]))

#entering the login information in the form and clicking the button. 

webElem &amp;lt;- remDr$findElement(using = &#39;id&#39;, value = &amp;quot;login_field&amp;quot;)
webElem$setElementAttribute(attributeName = &#39;value&#39;,value = gh_user)
webElem &amp;lt;- remDr$findElement(using = &#39;id&#39;, value = &amp;quot;password&amp;quot;)
webElem$setElementAttribute(attributeName = &#39;value&#39;,value = gh_pass)
webElem=remDr$findElement(using = &#39;xpath&#39;,&#39;//*[@id=&amp;quot;login&amp;quot;]/form/div[4]/input[3]&#39;)
webElem$clickElement()
Sys.sleep(1)

# Retrieve the plots into an html
out &amp;lt;- plyr::llply(repos,function(repo){
  remDr$navigate(sprintf(&#39;https://github.com/%s/%s/graphs/traffic&#39;,gh_team,repo))
  Sys.sleep(1)
  out &amp;lt;- XML::htmlParse(remDr$getPageSource(),asText = TRUE)
  sapply(c(&#39;clones&#39;,&#39;visitors&#39;),function(type){
  XML::getNodeSet(out,sprintf(sprintf(&#39;//*[@id=&amp;quot;js-%s-graph&amp;quot;]/div/div[1]/svg/g/g&#39;,type)))
},simplify = FALSE,USE.NAMES = TRUE)
},.progress = &#39;text&#39;)

# set the names (llply doesnt)
names(out) &amp;lt;- repos

# that&#39;s it we dont need the connection anymore
remDr$close()
rD[[&amp;quot;server&amp;quot;]]$stop()

# scrape the data from html into a data.frame

plot_data &amp;lt;- plyr::ldply(out,function(repo){
  plyr::mdply(names(repo),function(type){
    
    dat &amp;lt;- repo[[type]]
  
    if(is.null(dat)) return(NULL)
    
    # tick values we need for rescaling
    yticks_total &amp;lt;- as.numeric(sapply(getNodeSet(dat[[2]],&#39;g&#39;),XML::xmlValue))
    yticks_unique &amp;lt;- as.numeric(sapply(getNodeSet(dat[[5]],&#39;g&#39;),XML::xmlValue))
    
    x &amp;lt;- data.frame(type=type,
                    date = as.Date(sapply(getNodeSet(dat[[1]],&#39;g&#39;),XML::xmlValue),format = &#39;%m/%d&#39;),
                    total = as.numeric(sapply(getNodeSet(dat[[3]],&#39;circle&#39;),XML::xmlGetAttr,name = &#39;cy&#39;)),
                    unique = as.numeric(sapply(getNodeSet(dat[[4]],&#39;circle&#39;),XML::xmlGetAttr,name = &#39;cy&#39;)))
    
    # Because this is a d3.js object there are some technical details that
    # I&#39;m skipping here, but in short the y values need to be rescaled 
    # to show the actual values that you need.
    x$total &amp;lt;- scales::rescale(x$total,rev(range(yticks_total)))
    x$unique &amp;lt;- scales::rescale(x$unique,rev(range(yticks_unique)))
    
    #rehape the data.frame from wide to long
    x%&amp;gt;%reshape2::melt(.,c(&#39;type&#39;,&#39;date&#39;),variable.name=c(&#39;metric&#39;))
  })
},.id=&#39;repo&#39;)

#Create the plot

ggplot(plot_data,aes(x=date,y=value,colour=repo))+
  geom_point()+geom_line()+
  facet_grid(type~metric,scales=&#39;free_y&#39;)+
  scale_x_date(date_breaks = &amp;quot;1 day&amp;quot;,date_labels = &amp;quot;%m/%d&amp;quot;)+
  theme_bw()+
  theme(axis.text.x = element_text(angle=90),legend.position = &#39;top&#39;)+
  labs(title=sprintf(&#39;Github Team: %s&#39;,gh_team))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-the-function&#34;&gt;Run the function&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;traffic_plot &amp;lt;- github_traffic(gh_user=gh_user,
                               gh_pass=gh_pass,
                               gh_team=gh_team,
                               repos=repos)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;print-the-plot&#34;&gt;Print the plot&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;traffic_plot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/gh_traffic.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If the function fails for some reason this will release the port &lt;code&gt;RSelenium&lt;/code&gt; is holding ransom.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rD &amp;lt;- RSelenium::rsDriver(verbose = FALSE,port=4444L)
remDr &amp;lt;- rD$client
remDr$close()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Regular Expression Searching within Shiny Selectize Objects</title>
      <link>/post/2017-09-26-regexselect/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-09-26-regexselect/</guid>
      <description>

&lt;p&gt;regexSelect is a small package that uses &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Shiny modules&lt;/a&gt; to solve a problem in Shiny selectize objects - &lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2016/09/RegExCheatsheet.pdf&#34;&gt;regular expression&lt;/a&gt; (regex) searching. You can quickly filter the values in the selectize object, while being able to add that new regex query to the selectize list.&lt;/p&gt;

&lt;p&gt;This is great for long lists, since you can return multiple item simultaneously without needing to endlessly click items in a list!&lt;/p&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;regexSelect&#39;)
#devtools::install_github(&#39;yonicd/regexSelect&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below are two examples of using regular expressions to quickly populate multiple items in a &lt;code&gt;ggplot&lt;/code&gt; and a &lt;code&gt;datatable&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;regexselect-with-plots&#34;&gt;regexSelect with Plots&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/regexSelect/master/Miscellaneous/gifs/regexSelectPlot.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The shiny module works with two main functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# server side: 
  callModule(module=regexSelect, id=&#39;myId&#39;, reactive(&amp;lt;selectizeInput Choices&amp;gt;))
  
# ui side: 
  regexSelectUI(id = &amp;quot;myId&amp;quot;, label = &#39;myLabel&#39;, choices = &amp;lt;selectizeInput Choices&amp;gt;)
````

regexSelect comes with controls placed in a group checkbox below the selectize object. When calling regexSelect you can show or hide the checkbox controls (hidden by default), as to make it look like a normal selectize object, and save valuable UI real estate.

While the shiny app is running regexSelect properties can be manipulated through the checkbox controls giving greater flexibilty to:
  - Toggle regexSelect to work as a standard selectize object.
  - Retain the regex search as a new value the selectize object.
  - Change arguments that are passed to [base::grep](https://www.rdocumentation.org/packages/base/versions/3.4.1/topics/grep) : `ignore.case`, `perl`, `fixed`, `invert`.
  
```r
library(shiny)
library(ggplot2)

ui &amp;lt;- fluidPage(

  selectInput(&#39;var&#39;,
              &#39;Choose Variable&#39;,
              choices = names(diamonds)[sapply(diamonds,function(x){
              inherits(x,c(&#39;character&#39;,&#39;factor&#39;)))]
              },
              selected = &#39;clarity&#39;),
              
  uiOutput(&#39;regexchoose&#39;),
  
  plotOutput(&amp;quot;data&amp;quot;)
  
  )
  
server &amp;lt;- function(input, output, session) {
  
  output$regexchoose&amp;lt;-shiny::renderUI({
  
  regexSelectUI(id = &amp;quot;a&amp;quot;, 
                label = input$var,
                choices = unique(diamonds[[input$var]]), 
                checkbox.show = TRUE)
  })
  
  observeEvent(input$var,{
  
    curr_cols &amp;lt;- callModule(module = regexSelect, 
                            id = &amp;quot;a&amp;quot;,
                            shiny::reactive(unique(diamonds[[input$var]]))
                            )
    
    observeEvent(curr_cols(),{
      
      cols_now &amp;lt;- curr_cols()
      
      output$data &amp;lt;- shiny::renderPlot({
      
        ggplot(diamonds[diamonds[[input$var]]%in%cols_now,],
        aes_string(x=&#39;table&#39;,y=&#39;carat&#39;,colour=input$var))+
        geom_point()
        
      })
    })    
  })
  
}
  
shinyApp(ui, server)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;regexselect-with-tables&#34;&gt;regexSelect with Tables&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/regexSelect/master/Miscellaneous/gifs/regexSelectTable.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ui &amp;lt;- shiny::fluidPage(

  regexSelectUI(id = &amp;quot;a&amp;quot;, 
                label = &amp;quot;Variable:&amp;quot;,
                choices = names(iris)
                ),
  
  shiny::tableOutput(&amp;quot;data&amp;quot;)

)

server &amp;lt;- function(input, output, session) {

  curr_cols &amp;lt;- callModule(module = regexSelect, 
                          id = &amp;quot;a&amp;quot;,
                          shiny::reactive(names(iris))
                          )
  
  observeEvent(curr_cols(),{
  
    cols_now &amp;lt;- curr_cols()
  
    if( length(cols_now)==0 ) 
        cols_now &amp;lt;- names(iris)
  
    output$data &amp;lt;- shiny::renderTable({
    
      iris[,cols_now , drop = FALSE]
      
    }, rownames = TRUE)
    
  })
}

shiny::shinyApp(ui, server)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>What is the appropriate population scaling of the Affordable Care Act Funding?</title>
      <link>/post/2017-09-26-aca/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-09-26-aca/</guid>
      <description>

&lt;p&gt;I have been trying to decipher for myself, what is in the current (well, yesterday&amp;rsquo;s) Graham-Cassidy health care bill. I saw this image on many news outlets a few days ago and my inner hate for pie charts bubbled up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/ACA_pie_full.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a zoom in on the pie chart &amp;hellip; From what I can gather, these figures are attempting to say that there are specific states that are getting relatively more of the federal health care funds under the Afordable Care Act (ACA) than their relative state population. Among the many things that are really hard to do with pie charts , comparing distributions ranks pretty high up there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/ACA_pie.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It is common practice when comparing different geographical areas that have different populations levels to scale it using the rate per person (per capita) or per number of people, e.g. rate per 1,000 people. In this case it would be population adjusted state federal funding. The question that needs answering, what is the relevant population.&lt;/p&gt;

&lt;p&gt;Many charts in the last week have scaled the funding adjusted to state population (as is alluded to in the figure above), but the funds are not actually being used by everyone in each state, most people have health care from their employer. So, what is the actual population that is being serviced by the federal funding for the ACA? How much of a different picture does that paint from the original figure?&lt;/p&gt;

&lt;p&gt;Hopefully this post will help motivate readers to start looking around for more data on what is the effect of the proposed bill on the approprations of federal funds on the state level.&lt;/p&gt;

&lt;p&gt;My sources of information is the Kaiser Family Foundation site that have a great database for data on the ACA and the proposed bill, and Wikipedia for auxilary population data. We will end up with the following figure, but along the way I learned a number of things that I didn&amp;rsquo;t know from reading online and seeing the news on TV.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-17-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;A quick note before you proceed - This is not meant to be an all encompassing analysis of the predicted effects of the Graham-Cassidy bill, as it has been said before: &amp;ldquo;Healthcare is hard&amp;hellip;&amp;rdquo;, and if I made any bad assumptions I apologize in advanced and welcome any comments and suggestions to better understand the subject matter.&lt;/p&gt;

&lt;p&gt;Saying that, let&amp;rsquo;s continue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(xml2)
library(rvest)
library(dplyr)
library(ggplot2)
library(geofacet)
knitr::opts_chunk$set(fig.height=7,fig.width=12,warning=FALSE,message=FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scraping-the-relevant-information&#34;&gt;Scraping the relevant information&lt;/h2&gt;

&lt;h3 id=&#34;kaiser-family-foundation&#34;&gt;Kaiser Family Foundation&lt;/h3&gt;

&lt;h4 id=&#34;aca-and-graham-cassidy-federal-spending-by-state&#34;&gt;ACA and Graham-Cassidy federal spending by state.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;kf_spending &amp;lt;- (xml2::read_html(&#39;http://www.kff.org/health-reform/issue-brief/state-by-state-estimates-of-changes-in-federal-spending-on-health-care-under-the-graham-cassidy-bill/&#39;)%&amp;gt;%
  rvest::html_table())[[2]][-c(1,2,3,55),]

names(kf_spending) &amp;lt;- c(&#39;Location&#39;,&#39;ACA&#39;,&#39;GC&#39;,&#39;DIFF&#39;,&#39;PCT&#39;)

kf_spending$Location[which(kf_spending$Location==&#39;DC&#39;)]=&#39;District of Columbia&#39;

kf_spending &amp;lt;- kf_spending%&amp;gt;%mutate_at(.vars=vars(ACA,GC,DIFF,PCT),.funs=funs(as.numeric(gsub(&#39;[,%]&#39;,&#39;&#39;,.))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;aca-medicare-expansion-by-state&#34;&gt;ACA medicare expansion by state&lt;/h4&gt;

&lt;p&gt;The decision of each state to accept medicare expansion will have a large affect on the net affect of GC on the redistribution of federal funds. States that did not accept medicare expansion are expected to have a net positive increase of federal funds.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#http://www.kff.org/health-reform/state-indicator/state-activity-around-expanding-medicaid-under-the-affordable-care-act/?currentTimeframe=0&amp;amp;sortModel=%7B%22colId%22:%22Location%22,%22sort%22:%22asc%22%7D
kf_expansion &amp;lt;- read.csv(&#39;data/kf_expansion.csv&#39;,stringsAsFactors = FALSE,skip = 2)
kf_expansion &amp;lt;- kf_expansion[-c(1,53:61),-3]
names(kf_expansion)[2] &amp;lt;- &#39;Expansion&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;population-of-aca-enrollment-by-state&#34;&gt;Population of ACA enrollment by state.&lt;/h4&gt;

&lt;p&gt;The target population that will be used to scale the federal funds is the total marketplace enrollment for each state. We also add the characteristic of type of marketplace applied in the state to check if that has any effect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Federally-Facilitated Market&lt;/li&gt;
&lt;li&gt;State-based Marketplace&lt;/li&gt;
&lt;li&gt;State-based Marketplace (using HealthCare.gov)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#http://www.kff.org/health-reform/state-indicator/total-marketplace-enrollment/?currentTimeframe=0&amp;amp;sortModel=%7B%22colId%22:%22Total%20Individuals%20Who%20Have%20Selected%20a%20Marketplace%20Plan%22,%22sort%22:%22asc%22%7D
kf_marketplace_pop &amp;lt;- read.csv(&#39;data/kf_marketplace_pop.csv&#39;,stringsAsFactors = FALSE,skip = 2)
kf_marketplace_pop &amp;lt;- kf_marketplace_pop[-c(1,53:59),]
names(kf_marketplace_pop)[c(2,3)] &amp;lt;- c(&#39;Marketplace_Type&#39;,&#39;N&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wikipedia&#34;&gt;Wikipedia&lt;/h3&gt;

&lt;h4 id=&#34;state-characteristics-2016-elections-and-general-population&#34;&gt;State characteristics (2016 elections and general population)&lt;/h4&gt;

&lt;p&gt;To gather more characteristics of each state are the 2016 general election results and the total population in each state, so the prevalent scaling can be used as a comparison.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wiki_elections &amp;lt;- (xml2::read_html(&#39;https://en.wikipedia.org/wiki/United_States_presidential_election,_2016&#39;)%&amp;gt;%
        rvest::xml_nodes(xpath=&#39;//*[@id=&amp;quot;mw-content-text&amp;quot;]/div/div[40]/table&#39;)%&amp;gt;%
        rvest::html_table())[[1]][-c(1,58),c(1,3,6,23)]

names(wiki_elections) &amp;lt;- c(&#39;Location&#39;,&#39;Clinton&#39;,&#39;Trump&#39;,&#39;Total&#39;)

wiki_elections$Location[grep(&#39;^Nebraska&#39;,wiki_elections$Location)] &amp;lt;- &#39;Nebraska&#39;
wiki_elections$Location[grep(&#39;^Maine&#39;,wiki_elections$Location)] &amp;lt;- &#39;Maine&#39;

wiki_elections &amp;lt;- wiki_elections%&amp;gt;%
  mutate_at(.vars = vars(Clinton,Trump,Total),.funs=funs(as.numeric(gsub(&#39;[,]&#39;,&#39;&#39;,.))))%&amp;gt;%
  group_by(Location)%&amp;gt;%summarise_at(.vars = vars(Clinton,Trump,Total),.funs = funs(sum))%&amp;gt;%
  mutate(ClintonPct=Clinton/Total,TrumpPct=Trump/Total,TrumpWin=ifelse(TrumpPct&amp;gt;ClintonPct,&#39;Trump Win&#39;,&#39;Clinton Win&#39;))

wiki_pop &amp;lt;- (xml2::read_html(&#39;https://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population&#39;)%&amp;gt;%
        rvest::xml_nodes(xpath=&#39;//*[@id=&amp;quot;mw-content-text&amp;quot;]/div/table[1]&#39;)%&amp;gt;%
        rvest::html_table())[[1]][-c(30,53:64),c(3,4)]

names(wiki_pop) &amp;lt;- c(&#39;Location&#39;,&#39;Total_N&#39;)

wiki_pop$Total_N &amp;lt;- as.numeric(gsub(&#39;[,]&#39;,&#39;&#39;,wiki_pop$Total_N))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;join-all-the-data-sets&#34;&gt;Join all the data sets&lt;/h3&gt;

&lt;p&gt;We join all the information and create a new variable - the change in federal funds from ACA to GC. This is done for the rate per 1,000 individuals who have selected a market based plan and the broader per 1,000 individuals state total. The former assumes that this the more consice defition of the population better reflects what is the population serviced by the federal funding, and that it is the potential population that would be serviced by the GC bill.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;kf &amp;lt;- kf_marketplace_pop%&amp;gt;%
  left_join(kf_expansion,by=&#39;Location&#39;)%&amp;gt;%
  left_join(wiki_pop,by=&#39;Location&#39;)

kf &amp;lt;- kf_spending%&amp;gt;%left_join(kf, by = c(&#39;Location&#39;))%&amp;gt;%
  mutate(ratio_ACA=1000*ACA/N,ratio_GC=1000*GC/N,ratio_DIFF = ratio_GC-ratio_ACA,
         tot_ratio_ACA=1000*ACA/Total_N,tot_ratio_GC=1000*GC/Total_N,tot_ratio_DIFF = tot_ratio_GC-tot_ratio_ACA)%&amp;gt;%
  arrange(desc(ratio_DIFF))

kf &amp;lt;- kf%&amp;gt;%left_join(wiki_elections,by=&#39;Location&#39;)

kf$Expansion &amp;lt;- sprintf(&#39;Medicaid Expansion %s&#39;,kf$Expansion)

kf$Location &amp;lt;- factor(kf$Location,levels = kf$Location)

kf$Marketplace_Type &amp;lt;- factor(kf$Marketplace_Type,labels=c(&#39;Federally-Facilitated Market&#39;,&#39;State-based Marketplace&#39;,&#39;State-based Marketplace (using HealthCare.gov)&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;plots&#34;&gt;Plots&lt;/h2&gt;

&lt;h3 id=&#34;percent-of-state-population-enrolled-in-aca&#34;&gt;Percent of state population enrolled in ACA&lt;/h3&gt;

&lt;p&gt;First we want to see what is the scope of the population in each state that have selected an ACA market based plan. (note California&amp;hellip; not quite 12% of the US population)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;kf%&amp;gt;%
  mutate(pop_pct=100*N/Total_N)%&amp;gt;%
  arrange(desc(pop_pct))%&amp;gt;%
  mutate(Location=factor(Location,levels=Location))%&amp;gt;%
  ggplot(aes(x=Location,y=pop_pct))+
  geom_point()+
  coord_flip()+
  labs(y=&#39;Percent of Population that have selected an ACA market based plan&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-7-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;overall-distribution-by-medicare-expansion&#34;&gt;Overall distribution by Medicare Expansion&lt;/h3&gt;

&lt;p&gt;We then check that there really is a difference between states that expanded and did not expand medicaid under the ACA and if being a state that voted Republican compared to Democratic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_dat &amp;lt;- kf%&amp;gt;%
  dplyr::select(Expansion,Marketplace_Type,TrumpWin, ratio_DIFF,tot_ratio_DIFF)%&amp;gt;%
  reshape2::melt(.,id=c(&#39;Marketplace_Type&#39;,&#39;Expansion&#39;,&#39;TrumpWin&#39;))

levels(boxplot_dat$variable) &amp;lt;- c(&#39;per 1,000 Individuals who have\nselected a market based plan&#39;,&#39;per 1,000 Individuals&#39;)

  boxplot_dat%&amp;gt;%
    ggplot(aes(x=Expansion,
             y=value,
             fill=TrumpWin))+
  geom_boxplot()+
  geom_hline(aes(yintercept=0),linetype=2)+
  facet_wrap(~variable,ncol=1,scales=&#39;free_y&#39;)+
  labs(title=&#39;Change in Federal Funds ACA vs Graham-Cassidy, 2020-2026&#39;,
         y=&#39;Change in Federal Funds ($ Millions) per 1,000 individuals&#39;)+
  theme_bw()+
  theme(legend.position = &#39;bottom&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-8-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;Drilling down to state level figures we show for each state the change from ACA funding to the proposed GC funding per 1,000 persons who selected a market based ACA plan. The arrows move from ACA to GC funding and the y-axis is ordered by the increasing net difference. This comparison is faceted among the different characteristics scrapped from above.&lt;/p&gt;

&lt;p&gt;Some things to look for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New York has the largest negative net funding per 1,000 persons.&lt;/li&gt;
&lt;li&gt;Kentucky has the largest negative net funding per 1,000 persons among Republican leaning states.&lt;/li&gt;
&lt;li&gt;The net increase in funding per 1,000 persons for states that did not expand medicaid is mostly minimal.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- kf%&amp;gt;%ggplot(aes(x=Location,xend=Location,yend=ratio_GC,y=ratio_ACA,colour=ratio_DIFF))+
  geom_segment(arrow = arrow(length = unit(0.02, &amp;quot;npc&amp;quot;)))+
  coord_flip()+
  scale_colour_gradient(low = &#39;red&#39;,high = &#39;blue&#39;,name=&#39;Difference&#39;)+
  labs(title=&#39;Change in Federal Funds per 1,000 Individuals who have\nselected a market based plan ACA vs Graham-Cassidy, 2020-2026&#39;,
       subtitle=&#39;Arrow pointing to movement from ACA to Graham-Cassidy&#39;,
       caption=&#39;Source: Kaiser Family Foundation&#39;,
       y=&#39;Federal Funds ($ Millions) per 1,000 individuals who have selected a market based plan&#39;)+
  theme_bw()+
  theme(legend.position = &#39;bottom&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;policial-leaning&#34;&gt;Policial Leaning&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ TrumpWin , scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-10-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;aca-medicare-expansion&#34;&gt;ACA Medicare expansion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ Expansion , scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-11-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;aca-medicare-expansion-and-political-leaning&#34;&gt;ACA Medicare expansion and Political Leaning&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ Expansion + TrumpWin , scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-12-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;state-marketplace-type&#34;&gt;State Marketplace Type&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ Marketplace_Type, scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-13-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;aca-medicare-expansion-and-state-marketplace-type&#34;&gt;ACA Medicare expansion and State Marketplace Type&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ Expansion + Marketplace_Type , scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-14-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;geofaceting&#34;&gt;Geofaceting&lt;/h3&gt;

&lt;p&gt;Lastly, we construct geographic representation of the difference between the ACA and the GC bill using &lt;a href=&#34;https://twitter.com/hafenstats&#34;&gt;Ryan Hafen&amp;rsquo;s&lt;/a&gt;  &lt;a href=&#34;https://CRAN.R-project.org/package=geofacet&#34;&gt;geofacet&lt;/a&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;states_facet &amp;lt;- state_ranks%&amp;gt;%left_join(kf%&amp;gt;%rename(name=Location),by=&#39;name&#39;)

states_facet$Expansion &amp;lt;- factor(states_facet$Expansion,labels=c(&#39;Expansion&#39;,&#39;No Expansion&#39;))

states_facet$tile_lbl &amp;lt;- sprintf(&#39;%s\n%s&#39;,states_facet$Expansion,states_facet$TrumpWin)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;total-state-population&#34;&gt;Total State Population&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;states_facet%&amp;gt;%
  ggplot(aes(x=&#39;1&#39;, y=&#39;1&#39;,fill=tot_ratio_DIFF)) +
  geom_tile() +
  geom_text(aes(label=tile_lbl),size=2)+
  theme_bw() +
  facet_geo( ~ state)+
  scale_fill_gradient2(low=&#39;red&#39;,mid=&#39;white&#39;,high=&#39;green&#39;,name=&#39;Difference&#39;) +
  theme(legend.position = &#39;bottom&#39;,
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank())+
  labs(title=&#39;Change in Federal Funds per 1,000 Individuals, 2020-2026&#39;,
       caption=&#39;Source: Kaiser Family Foundation&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-16-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h4 id=&#34;aca-enrollment-population&#34;&gt;ACA enrollment population&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;states_facet%&amp;gt;%
  ggplot(aes(x=&#39;1&#39;, y=&#39;1&#39;,fill=ratio_DIFF)) +
  geom_tile() +
  geom_text(aes(label=tile_lbl),size=2)+
  theme_bw() +
  facet_geo( ~ state)+
  scale_fill_gradient2(low=&#39;red&#39;,mid=&#39;white&#39;,high=&#39;green&#39;,name=&#39;Difference&#39;) +
  theme(legend.position = &#39;bottom&#39;,
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank())+
  labs(title=&#39;Change in Federal Funds per 1,000 Individuals who have\nselected a market based plan ACA vs Graham-Cassidy, 2020-2026&#39;,
       caption=&#39;Source: Kaiser Family Foundation&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-17-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automating roxygen2 package documentation</title>
      <link>/post/2017-09-18-sinew/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-09-18-sinew/</guid>
      <description>

&lt;p&gt;Thinking of creating a new package? Dread the task of function documentation? Afraid to run &lt;code&gt;devtools::check(build_args = &#39;--as-cran&#39;)&lt;/code&gt; and get bombarded by Errors, Warnings, and Notes (oh my!) ? Wait&amp;hellip;. breathe!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/pWYReekqQW72U/giphy.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After feeling all that anxiety and following all of Hadley&amp;rsquo;s &lt;a href=&#34;http://r-pkgs.had.co.nz/man.html&#34;&gt;directions&lt;/a&gt; online, I felt I was doing a lot of manual labour, and that a package should be doing all lot of this for me. So we wrote one - &lt;code&gt;sinew&lt;/code&gt; (sin-yu).&lt;/p&gt;

&lt;h2 id=&#34;tl-dr-sinew-is-an-automatic-roxygen2-documentation-creator&#34;&gt;tl;dr: &lt;code&gt;sinew&lt;/code&gt; is an automatic roxygen2 documentation creator&lt;/h2&gt;

&lt;p&gt;Quick example, run it in R:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt; install.packages(&amp;quot;sinew&amp;quot;) # or devtools::install_github(&#39;metrumresearchgroup/sinew&#39;)
 
 # simple function
 
 myFun &amp;lt;- function(h=1){
   utils::head(rnorm(10),h)
 }
 
 library(sinew)
 makeOxygen(myFun)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will produce the following output (which you can then append above your definition of &lt;code&gt;myFun&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(myFun)

#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param h PARAM_DESCRIPTION, Default: 1
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @details DETAILS
#&#39; @examples 
#&#39; \dontrun{
#&#39; if(interactive()){
#&#39;  #EXAMPLE1
#&#39;  }
#&#39; }
#&#39; @seealso 
#&#39;  \code{\link[utils]{head}}
#&#39; @rdname myFun
#&#39; @export 
#&#39; @importFrom utils head
myFun &amp;lt;- function(h=1){
  utils::head(h)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or document functions interactively with the shiny gadget:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;400&#34; src=&#34;https://www.youtube.com/embed/cabOtf191OQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;For more details read the rest of the post, or skip straight to the gitbook: &lt;a href=&#34;https://metrumresearchgroup.github.io/sinew/&#34;&gt;https://metrumresearchgroup.github.io/sinew/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;why-sinew&#34;&gt;Why sinew?&lt;/h2&gt;

&lt;p&gt;Let me explain by example&amp;hellip;&lt;/p&gt;

&lt;p&gt;The current way to start down the documentation path is to create a function, I&amp;rsquo;ll use &lt;code&gt;myFun&lt;/code&gt; defined above. Next I would use the skeleton provided by RStudio (In the toolbar Code=&amp;gt;Insert Roxygen Skeleton).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; Title
#&#39;
#&#39; @param h 
#&#39;
#&#39; @return
#&#39; @export
#&#39;
#&#39; @examples
myFun &amp;lt;- function(h=1){
  utils::head(h)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gets me on my way, but there is information nested within the function itself that can be useful to document and manage the namespace&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the default value of &lt;code&gt;h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the function &lt;code&gt;head&lt;/code&gt; needs to be imported from the package &lt;code&gt;utils&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I could just add that manually but this is just a toy example, actual functions have many parameters and you can import many functions from a number of different packages.&lt;/p&gt;

&lt;p&gt;Trying to do the documentation bookkeeping as you develop the function will make you lose your train of thought, and make you forget that great idea you just had. Or you could write the full function and then at the end try to figure out what functions you need to import what packages they are from, should they get a seealso field, what parameters you used and so on&amp;hellip;&lt;/p&gt;

&lt;p&gt;Sinew will do this for you. It will parse your full function for relevant information that can fill in the blanks in the roxygen2 documentation and manage your import fields for you.
Think of it as connecting the meat of your function to the Roxygen2 skeleton - or just the &lt;a href=&#34;https://en.wikipedia.org/wiki/Tendon&#34;&gt;definition&lt;/a&gt; of the term sinew (again sin-yu). Added bonus it will help keep your package CRAN ready as you develop.&lt;/p&gt;

&lt;p&gt;So how would that skeleton look after running it with sinew?&lt;/p&gt;

&lt;p&gt;The workhorse of sinew is &lt;code&gt;makeOxygen&lt;/code&gt;, it takes functions and returns Roxygen2 headers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(myFun)

#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param h PARAM_DESCRIPTION, Default: 1
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @details DETAILS
#&#39; @examples 
#&#39; \dontrun{
#&#39; if(interactive()){
#&#39;  #EXAMPLE1
#&#39;  }
#&#39; }
#&#39; @seealso 
#&#39;  \code{\link[utils]{head}}
#&#39; @rdname myFun
#&#39; @export 
#&#39; @importFrom utils head
myFun &amp;lt;- function(h=1){
  utils::head(h)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That little function had a lot of information embbeded in it to make your documentation well rounded.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each field has it&amp;rsquo;s own &lt;em&gt;placeholder&lt;/em&gt; that will guide you to what is expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;param&lt;/strong&gt; has the default value built in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;examples&lt;/strong&gt;  is populated with a more current layout to support htmlwidget and shiny examples.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;utils&lt;/code&gt; was found and was added to &lt;strong&gt;importFrom&lt;/strong&gt; automatically as was it&amp;rsquo;s &lt;strong&gt;seealso&lt;/strong&gt; counterpart.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rdname&lt;/strong&gt; was added with the name of the function.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now lets take a real function - &lt;code&gt;lm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeOxygen(lm)

#&#39; @title FUNCTION_TITLE
#&#39; @description FUNCTION_DESCRIPTION
#&#39; @param formula PARAM_DESCRIPTION
#&#39; @param data PARAM_DESCRIPTION
#&#39; @param subset PARAM_DESCRIPTION
#&#39; @param weights PARAM_DESCRIPTION
#&#39; @param na.action PARAM_DESCRIPTION
#&#39; @param method PARAM_DESCRIPTION, Default: &#39;qr&#39;
#&#39; @param model PARAM_DESCRIPTION, Default: TRUE
#&#39; @param x PARAM_DESCRIPTION, Default: FALSE
#&#39; @param y PARAM_DESCRIPTION, Default: FALSE
#&#39; @param qr PARAM_DESCRIPTION, Default: TRUE
#&#39; @param singular.ok PARAM_DESCRIPTION, Default: TRUE
#&#39; @param contrasts PARAM_DESCRIPTION, Default: NULL
#&#39; @param offset PARAM_DESCRIPTION
#&#39; @param ... PARAM_DESCRIPTION
#&#39; @return OUTPUT_DESCRIPTION
#&#39; @details DETAILS
#&#39; @examples 
#&#39; \dontrun{
#&#39; if(interactive()){
#&#39;  #EXAMPLE1
#&#39;  }
#&#39; }
#&#39; @seealso 
#&#39;  \code{\link[stats]{model.frame}}
#&#39; @rdname lm
#&#39; @export 
#&#39; @importFrom stats model.frame
lm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That would of been a pain to do by hand, all that is left to do is replace the placeholders with relevant information and you&amp;rsquo;re done. Also notice the layout is consistent so other people (and you) can easily navigate the help across the package functions.&lt;/p&gt;

&lt;h2 id=&#34;a-few-features-and-use-cases&#34;&gt;A few features and use cases:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Setting package options persistent during a session is done using &lt;code&gt;sinew_opts&lt;/code&gt; (much like &lt;code&gt;knitr::opts_chunk&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For keeping settings persistent across sessions during package development sinew reads from the working directory on load a file named &lt;code&gt;_sinewconfig.yml&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To run &lt;code&gt;makeOxygen&lt;/code&gt; in batch mode (like a whole &lt;code&gt;./R&lt;/code&gt; package subdirectory) use the function &lt;code&gt;makeOxyFile&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To convert a long single file with multiple functions interwoven with a body script into multiple single function files, and keeping the script body intact,  use &lt;code&gt;untangle&lt;/code&gt;. If a function within the long file already has roxygen2 headers then they will be carried over to the new file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To quickly run through a whole package and create the DESCRIPTION file &lt;code&gt;Imports:&lt;/code&gt; field use &lt;code&gt;makeImport(&#39;./R&#39;,format=&#39;description&#39;)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After updating a function the documentation gets out of synch and needs updating. &lt;code&gt;moga&lt;/code&gt; (make oxygen great again!) will cross check the current documentation of an R script and the current function script itself and update/add any parameters/defaults/imports discrepancies.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Setting &lt;code&gt;cut&lt;/code&gt; to an integer value in &lt;code&gt;makeOxygen&lt;/code&gt; to return &lt;strong&gt;import package&lt;/strong&gt; instead of &lt;strong&gt;importFrom package function1 [function2 &amp;hellip;]&lt;/strong&gt; for packages that call more than the value assigned to &lt;code&gt;cut&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;interactive-documentation&#34;&gt;Interactive Documentation&lt;/h2&gt;

&lt;p&gt;A Shiny gadget was built to combine all this into an easy to use interface. Highlight text (preferably a function) in source editor of RStudio and then deploy the addin from the addins menu.&lt;/p&gt;

&lt;p&gt;The gadget can read in almost any source you have the function in: unsourced functions, functions in the global environment, in a loaded package, in an installed package that you didn&amp;rsquo;t load yet.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;400&#34; src=&#34;https://www.youtube.com/embed/S8dAOwrvoDw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The gadget will allow you to preview the roxygen header, add and remove roxygen2 fields with checkboxes and control the level of &lt;code&gt;cut&lt;/code&gt;. When you&amp;rsquo;re ready insert what you see in the preview pane into the editor. When you&amp;rsquo;re done with one function highlight another one and continue to work, if you need to move to another file tab&amp;hellip; that&amp;rsquo;s ok too!&lt;/p&gt;

&lt;p&gt;If there is already documentation move into &lt;strong&gt;update mode&lt;/strong&gt;, and touch up any changes that need to be made through &lt;code&gt;moga&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>