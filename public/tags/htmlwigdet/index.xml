<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Htmlwigdet on Reproducible Random Thoughts</title>
    <link>/tags/htmlwigdet/</link>
    <description>Recent content in Htmlwigdet on Reproducible Random Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>yonicd@gmail.com (Jonathan Sidi)</managingEditor>
    <webMaster>yonicd@gmail.com (Jonathan Sidi)</webMaster>
    <lastBuildDate>Tue, 07 Nov 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/htmlwigdet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Firearms Sourced and Recovered in the United States and Territories 2010-2016</title>
      <link>/post/2017-11-07-gunflow/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-11-07-gunflow/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I want to try and probe a question that was raised since Las Vegas and now revived due to the tragedy in Sutherland Springs,TX: Given the free trade between states, can a state unilaterally regulate firearms. This post will try to start to give an answer to this question using R.&lt;/p&gt;
&lt;p&gt;Since there is not an open electronic federal database for firearm ownership and transactions, one important source of information is the &lt;a href=&#34;https://www.atf.gov/resource-center/firearms-trace-data-2016&#34;&gt;Bureau of Alcohol, Tobacco and Firearms&lt;/a&gt;, (ATF). They publish the trace of firearms that were recovered every year, and when &lt;em&gt;possible&lt;/em&gt; trace the state where the firearm originated. This creates a weighted adjaceny matrix that is similar to what in economics is called &lt;a href=&#34;http://www.imf.org/external/pubs/cat/longres.aspx?sk=20096&#34;&gt;Direction of Trade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this &lt;a href=&#34;https://www.atf.gov/docs/undefined/sourcerecoverybystatecy2016xlsx/download&#34;&gt;matrix&lt;/a&gt; the rows depict the source and the columns depict the destination. This lets one get an idea where firearms that are confiscated by the ATF orginated from. From this we can also infer which states are net importers of firearms and which states are net exporters.
I will explore this matrix in an attempt to better understand if firearms are more likely to flow between geographically adjacent states. In the end I will get to a shiny app that ties everything together, for those who want to stop hereâ€¦&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/gunflow_slick.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The shiny app can be run directly&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pkgs &amp;lt;- c(&amp;#39;reshape2&amp;#39;,&amp;#39;geojson&amp;#39;,&amp;#39;readxl&amp;#39;,&amp;#39;leaflet&amp;#39;,
&amp;#39;httr&amp;#39;,&amp;#39;rgeolocate&amp;#39;,&amp;#39;shiny&amp;#39;,&amp;#39;ggplot2&amp;#39;,&amp;#39;sp&amp;#39;,
&amp;#39;widyr&amp;#39;,&amp;#39;igraph&amp;#39;,&amp;#39;slickR&amp;#39;,&amp;#39;ggraph&amp;#39;,&amp;#39;svglite&amp;#39;,&amp;#39;dplyr&amp;#39;)

check &amp;lt;- sapply(pkgs,require,warn.conflicts = TRUE,character.only = TRUE)

if( any(!check) ) {
  
  pkgs.missing &amp;lt;- pkgs[!check]
  install.packages(pkgs.missing)
  invisible(sapply(pkgs.missing,
                   require,
                   warn.conflicts = TRUE,
                   character.only = TRUE)
            )
}

shiny::runGitHub(&amp;#39;yonicd/gunflow&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or accessed through &lt;a href=&#34;https://ysidi.shinyapps.io/gunflow/&#34;&gt;shinyapps.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please deploy from R console as to not deplete the account on shinyapps.io. Thank you!&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;data-sources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data sources&lt;/h2&gt;
&lt;p&gt;We read in the data sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;us-states.geojson: for the leaflet,&lt;/li&gt;
&lt;li&gt;gun_mat: weighted adjency matrices from the ATF site&lt;/li&gt;
&lt;li&gt;atf_data: total firearm registration with adult state population to calculate ratios per 100 persons.&lt;/li&gt;
&lt;li&gt;gun_ranking: State firearm regulation ranking from the &lt;a href=&#34;http://lawcenter.giffords.org/scorecard/&#34;&gt;Law Center To Prevent Gun Violence&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the raw data can be found in the project home repo &lt;a href=&#34;https://github.com/yonicd/gunflow&#34; class=&#34;uri&#34;&gt;https://github.com/yonicd/gunflow&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states &amp;lt;- geojsonio::geojson_read(&amp;#39;https://github.com/yonicd/gunflow/blob/master/www/us-states.geojson?raw=true&amp;#39;, what = &amp;quot;sp&amp;quot;)
f &amp;lt;- tempfile()
for(FILE in c(&amp;#39;gun_mat&amp;#39;,&amp;#39;atf_data&amp;#39;,&amp;#39;gun_ranking&amp;#39;)){
download.file(sprintf(&amp;#39;https://github.com/yonicd/gunflow/blob/master/www/%s.rda?raw=true&amp;#39;,FILE),destfile = f)
load(f)
}
unlink(f)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;helper-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Helper functions&lt;/h2&gt;
&lt;p&gt;To save some space we load helper functions from the &lt;a href=&#34;https://github.com/yonicd/gunflow&#34;&gt;project repo&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
source(&amp;#39;https://github.com/yonicd/gunflow/blob/master/funs.R?raw=true&amp;#39;)

plot_size = 7

capitalize=function(x){
  gsub(&amp;quot;(^|[[:space:]])([[:alpha:]])&amp;quot;, &amp;quot;\\1\\U\\2&amp;quot;, x, perl=TRUE)
}

net_flow &amp;lt;- calc(side = &amp;#39;from&amp;#39;)%&amp;gt;%
  left_join(calc(side = &amp;#39;to&amp;#39;),by=c(&amp;#39;year&amp;#39;,&amp;#39;state&amp;#39;))%&amp;gt;%
  mutate(net=state_sum_from-state_sum_to,
         ratio_net=ratio_from-ratio_to)%&amp;gt;%
  arrange(desc(ratio_net))
## Warning: group_by_() is deprecated. 
## Please use group_by() instead
## 
## The &amp;#39;programming&amp;#39; vignette or the tidyeval book can help you
## to program with group_by() : https://tidyeval.tidyverse.org
## This warning is displayed once per session.
## Warning: rename_() is deprecated. 
## Please use rename() instead
## 
## The &amp;#39;programming&amp;#39; vignette or the tidyeval book can help you
## to program with rename() : https://tidyeval.tidyverse.org
## This warning is displayed once per session.

network_dat &amp;lt;- net_dat(gun_mat)
## Warning: funs() is soft deprecated as of dplyr 0.8.0
## please use list() instead
## 
## # Before:
## funs(name = f(.))
## 
## # After: 
## list(name = ~f(.))
## This warning is displayed once per session.
tot &amp;lt;- scatter_fun(gun_mat)
tot &amp;lt;- tot%&amp;gt;%mutate(state=as.character(state))%&amp;gt;%left_join(gun_ranking,by=c(&amp;#39;year&amp;#39;,&amp;#39;state&amp;#39;))

tot$state_grade &amp;lt;- gsub(&amp;#39;NA&amp;#39;,&amp;#39;&amp;#39;,paste(tot$state,tot$grade,tot$smart_law))
tot$grade_round &amp;lt;- gsub(&amp;#39;[+-]&amp;#39;,&amp;#39;&amp;#39;,tot$grade)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;leaflet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Leaflet&lt;/h2&gt;
&lt;p&gt;The leafet is a great way to show interactively an adjacency matrix. To reproduce this map use the script &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/leaflet.R&#34;&gt;here&lt;/a&gt;. In the following output, when hovering above a state you can see information regarding the total firearms recovered in Connecticut, the total amount of firearms imorted into Connecticut in 2016 and what percent each state is of the imported total.In the shiny app you can control what state is selected and if the direction of flow is importing or exporting, as well if the colour scale is on the state level of national level.&lt;/p&gt;
&lt;p&gt;In the app it is easy to see that since the Sandy Hook mass shooting high regulation has caused a large net inflow of firearms into Connecticut. Since these are only the recovered firearms by authorities it is a proxy of the amount of weapons entering the state from other states.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2017-11-07-gunflow_files/figure-html//widgets/widget_unnamed-chunk-5.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;trends-of-firearm-registration-2010-2016&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Trends of firearm registration 2010-2016&lt;/h2&gt;
&lt;p&gt;In the exploratory graphs first we check what states are trending up or down with regards to firearms registration. We calculate the ratios per 100 adults to make it possible to compare across states.&lt;/p&gt;
&lt;p&gt;We then create two plots one shows the trends on the scale of the ratios per 100 adults and another with the percent change from 2010 (base year), so we can compare across states and years. Code to create plots can be found &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/trends.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What we find can see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wyoming needed to be removed from the plots because it so skewed the y-axis with a rate of 30 registered per 100 adults in 2016.&lt;/li&gt;
&lt;li&gt;New Hampshire has increased the rate of firearms per 100 adults from 3 in 2015 to 6 in 2016.&lt;/li&gt;
&lt;li&gt;The geographic region that has the highest rate is the Mountain geographic area that includes: Idaho, New Mexico, Nevada, Arizona and Utah&lt;/li&gt;
&lt;li&gt;16 States have at least 100% increase in gun registration since 2010.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/blog/master/img/gunflow/atf_plot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/blog/master/img/gunflow/atf_base_plot.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;net-flow-per-100-firearms-between-states&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Net flow per 100 firearms between states&lt;/h2&gt;
&lt;p&gt;We move on to the adjacency matrices showing the firearms found by the ATF. The script the plot for 2016 can be found &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/net_flow.R&#34;&gt;here&lt;/a&gt;. We calculate the outflow rate per 100 firearms per state and the inflow rate per 100 firearms and the subtract the two to get the net flow per 100 firearms. A high positive number depicts a net exporter of firearms and a low negative number depicts a net importer of firearms. The gif below animates how this metric changes from 2011-2016.&lt;/p&gt;
&lt;p&gt;What we see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Washington DC and Puerto Rico have moved from strong net exporters to the top net importers of firearms.&lt;/li&gt;
&lt;li&gt;Since 2014 New England has become a strong net exporter of firearms.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/net_flow.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;firearms-flow-relationship&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Firearms Flow relationship&lt;/h2&gt;
&lt;p&gt;Next we combine the firearms flow with the regulation grades for each state 2011-2016, and give a colour for each node as the number of firearms recovered within the state and it was registered to someone in the state. The script to recreate these plots can be found &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/scatter.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here we start to see that states with high regulation tend to be high net importers of firearms.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/scatter_flow.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;state-firearm-flow-networks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;State Firearm flow networks&lt;/h2&gt;
&lt;p&gt;To find clusters of states that have a high degree of correlation among each other and locate states that are conduits between geographical areas we use visualize the weighted adjaceny matrix as a network. The script to create these plots can be found &lt;a href=&#34;https://github.com/yonicd/gunflow/blob/master/funs.R&#34;&gt;here&lt;/a&gt;. We can see over time that the network has become more connected and clusters of states have been connected across geographical regions, with Tennesee and Michigan being having a central role in these connections.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/net_plot.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;power-centrality&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Power Centrality&lt;/h2&gt;
&lt;p&gt;Finally we try and see if we can locate states that have a strong centrality power with the networks. We use the Bonacichi centrality metric to rate both the states that have high centrality because they are connected to states with that have themselves many connections (a cooperative relationship). Inversely we also measure states that are have a high centrality measure because states that are connected to them lack connections and depened on the state for firearms (an antagonistic relationship). The script to create these plots can be found &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/gunflow_scripts/power.R&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/yonicd/blog/blob/master/img/gunflow/power.gif?raw=true&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This exploratory analysis attempted to start to answer the question can states unilaterally regulate firearms effictively. My impression is that it is nearly impossible to do so when neighboring states do not share the same regulatory framework. This manifests itself in changes of interstate firearm flow to reach a new steady state of firearms regardless of within state regulation.&lt;/p&gt;
&lt;p&gt;Hopefully this will be a good starting point for some modeling of firearm flow between states and developing more effective state and federal policy through the prediction of the flow of firearms between states.&lt;/p&gt;
&lt;p&gt;Any thoughts on the analysis is always welcome, especially if you think I erred in any way, or want have any ideas on how to model such a problem.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>jsTree htmlwidget</title>
      <link>/post/jstree/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/jstree/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;jsTree is a R package that is a standalone htmlwidget for the jsTree JavaScript library. It can be run from the R console directly into the Rstudio Viewer, be used in a Shiny application or be part of an Rmarkdown html output.&lt;/p&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#CRAN
install.packages(&amp;#39;jsTree&amp;#39;)

#Github
devtools::install_github(&amp;#39;metrumresearchgroup/jsTree&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The motivation for the package came from the &lt;a href=&#34;https://github.com/trestletech/shinyTree&#34;&gt;shinyTree&lt;/a&gt; by Jeff Allen, which has an early version of the JavaScript library hardcoded into a Shiny application.&lt;/p&gt;
&lt;p&gt;The input for the htmlwidget is a character vector and the heirarchy is set by the â€˜/â€™, as to mimic the delimiter of a file path.&lt;/p&gt;
&lt;p&gt;The main purpose of this package is vizualize folder hierarchy, much like in the &lt;code&gt;Files&lt;/code&gt; tab in RStudio. But, instead of looking in local directories it will be used for remote repositories, such as github, bitbucket and svn repositories. This is implemented in the &lt;a href=&#34;https://github.com/metrumresearchgroup/vcs&#34;&gt;vcs&lt;/a&gt; package and a future post will show utility that package gives.&lt;/p&gt;
&lt;p&gt;To show the basic functionality of jsTree we will use a dataset that contains all superfund sites from the &lt;a href=&#34;https://www.epa.gov/superfund/search-superfund-sites-where-you-live&#34;&gt;EPA&lt;/a&gt;. You can access the tibble &lt;a href=&#34;https://github.com/yonicd/blog/blob/master/data/superfundsite.Rds&#34;&gt;here&lt;/a&gt;. The data&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(htmlTable)
library(jsTree)
library(widgetframe)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Read in the data
superfundsite &amp;lt;- readRDS(&amp;#39;../../jstree_data/superfundsite.Rds&amp;#39;)

htmlTable::htmlTable(head(superfundsite),rnames=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;gmisc_table&#34; style=&#34;border-collapse: collapse; margin-top: 1em; margin-bottom: 1em;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
Region
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
State
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
City
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
County
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
Zip Code
&lt;/th&gt;
&lt;th style=&#34;border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;&#34;&gt;
Site Name
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Massachusetts
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
ACTON
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
MIDDLESEX
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01720
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
W.R. GRACE &amp;amp; CO., INC. (ACTON PLANT)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Massachusetts
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
AMESBURY
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
ESSEX
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01913
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
MICROFAB INC (FORMER)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Massachusetts
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
ASHLAND
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
MIDDLESEX
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01721
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
NYANZA CHEMICAL WASTE DUMP
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Massachusetts
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
ATTLEBORO
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
BRISTOL
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
02703
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
WALTON &amp;amp; LONSBURY INC.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Maine
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
AUGUSTA
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
KENNEBEC
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
04330
&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;
Oâ€™CONNOR CO.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
01
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
Connecticut
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
BARKHAMSTED
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
LITCHFIELD
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
06063
&lt;/td&gt;
&lt;td style=&#34;border-bottom: 2px solid grey; text-align: center;&#34;&gt;
BARKHAMSTED-NEW HARTFORD LANDFILL
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-usage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Usage&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# collapse columns to be delimited by &amp;#39;/&amp;#39;
myx &amp;lt;- apply(superfundsite,1,function(x) paste(x,collapse = &amp;#39;/&amp;#39;))

# call jsTree
j0 &amp;lt;- jsTree(obj = myx)

# place widget in iframe to use in blog post 
# (not needed in regular usage)
frameWidget(j0)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2017-10-24-jstree_files/figure-html//widgets/widget_ex0.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;initialize-tree-with-checked-boxes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initialize tree with checked boxes&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nodestate1 &amp;lt;- superfundsite$State==&amp;#39;California&amp;#39;

j1 &amp;lt;- jsTree(myx,nodestate=nodestate1)

frameWidget(j1)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2017-10-24-jstree_files/figure-html//widgets/widget_ex1.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;tooltips&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tooltips&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use the zipcode as a tooltip on the county name

myx2 &amp;lt;- apply(superfundsite[,-c(5)],1,paste,collapse=&amp;#39;/&amp;#39;)

zipcode_label &amp;lt;- superfundsite$`Zip Code`
names(zipcode_label) &amp;lt;- superfundsite$County

j2 &amp;lt;- jsTree(myx2,tooltips = zipcode_label)

frameWidget(j2)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2017-10-24-jstree_files/figure-html//widgets/widget_ex2.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;shiny&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shiny&lt;/h2&gt;
&lt;p&gt;jsTree can be used in Shiny applications and supplies observers so the Shiny can react to the tree.&lt;/p&gt;
&lt;iframe src=&#34;https://tranquil-escarpment-51788.herokuapp.com/&#34; style=&#34;width: 800px; height: 500px&#34;&gt;
&lt;/iframe&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- shiny::fluidPage(
  
  shiny::column(width=4,jsTree::jsTreeOutput(&amp;#39;tree&amp;#39;)),
  
  shiny::column(width=8,shiny::uiOutput(&amp;#39;chosen&amp;#39;))
  
)

server &amp;lt;- function(input, output,session) {
  
  network &amp;lt;- shiny::reactiveValues()
  
  shiny::observeEvent(input$tree_update,{
    
    current_selection &amp;lt;- input$tree_update$.current_tree
    if(!is.null(current_selection)) 
      network$tree &amp;lt;- jsonlite::fromJSON(current_selection)
    
  })
  
  shiny::observeEvent(network$tree,{
    
    output$results &amp;lt;- shiny::renderPrint({
      
      str.out &amp;lt;- &amp;#39;&amp;#39;
      
      if(length(network$tree)&amp;gt;0)
        str.out=network$tree
      
      return(str.out)
    })    
  })
  
  output$chosen &amp;lt;- shiny::renderUI({
    
    list(shiny::h3(&amp;#39;Selected Items&amp;#39;),
         
    shiny::verbatimTextOutput(outputId = &amp;quot;results&amp;quot;))
    
  })
  
  output$tree &amp;lt;- jsTree::renderJsTree({
    
    nested_string &amp;lt;- myx
    
    jsTree(nested_string)
    
  })
  
}

shinyApp(ui, server)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>slickR</title>
      <link>/post/2017-04-07-slickr/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-04-07-slickr/</guid>
      <description>

&lt;p&gt;We are happy to bring the &lt;a href=&#34;https://kenwheeler.github.io/slick/&#34;&gt;slick&lt;/a&gt; JavaScript library to R. It is self described as &amp;ldquo;the last carousel you&amp;rsquo;ll ever need&amp;rdquo;. This carousel is based on putting the elements of the carousel in a &lt;a href=&#34;https://www.w3schools.com/tags/tag_div.asp&#34;&gt;div&lt;/a&gt; HTML tag. This makes the carousel very versatile in what can be placed inside. Regular objects that are placed in a carousel can be for example: images, plots, tables, gifs, videos, iframes and even htmlwidgets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/slickR/master/Miscellaneous/Multimedia/gif/slickRnestingWidgets.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This tool helps review multiple outputs in an efficient manner and saves much needed space in documents and Shiny applications, while creating a user friendly experience.&lt;/p&gt;

&lt;p&gt;These carousels can be used directly from the R console, from RStudio, in Shiny apps and R Markdown documents.&lt;/p&gt;

&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/slickR/index.html&#34;&gt;CRAN&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;slickR&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/metrumresearchgroup/slickR&#34;&gt;Github&lt;/a&gt; (dev)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#39;metrumresearchgroup/slickR&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;p&gt;There are many options within the slick carousel, to get get started with the basics we will show a few examples in the rest of the post. If you want to try out any of the examples you can go to this &lt;a href=&#34;metrumresearchgroup.github.io/slickR&#34;&gt;site&lt;/a&gt; where they are rendered and can be tested out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(svglite)
library(lattice)
library(ggplot2)
library(rvest) 
library(reshape2)
library(dplyr)
library(htmlwidgets)
library(slickR)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;images&#34;&gt;Images&lt;/h1&gt;

&lt;p&gt;Some web scraping for the images example&amp;hellip;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#NBA Team Logos
nbaTeams=c(&amp;quot;ATL&amp;quot;,&amp;quot;BOS&amp;quot;,&amp;quot;BKN&amp;quot;,&amp;quot;CHA&amp;quot;,&amp;quot;CHI&amp;quot;,&amp;quot;CLE&amp;quot;,&amp;quot;DAL&amp;quot;,&amp;quot;DEN&amp;quot;,&amp;quot;DET&amp;quot;,&amp;quot;GSW&amp;quot;,
    &amp;quot;HOU&amp;quot;,&amp;quot;IND&amp;quot;,&amp;quot;LAC&amp;quot;,&amp;quot;LAL&amp;quot;,&amp;quot;MEM&amp;quot;,&amp;quot;MIA&amp;quot;,&amp;quot;MIL&amp;quot;,&amp;quot;MIN&amp;quot;,&amp;quot;NOP&amp;quot;,&amp;quot;NYK&amp;quot;,
    &amp;quot;OKC&amp;quot;,&amp;quot;ORL&amp;quot;,&amp;quot;PHI&amp;quot;,&amp;quot;PHX&amp;quot;,&amp;quot;POR&amp;quot;,&amp;quot;SAC&amp;quot;,&amp;quot;SAS&amp;quot;,&amp;quot;TOR&amp;quot;,&amp;quot;UTA&amp;quot;,&amp;quot;WAS&amp;quot;)
teamImg=sprintf(&amp;quot;https://i.cdn.turner.com/nba/nba/.element/img/4.0/global/logos/512x512/bg.white/svg/%s.svg&amp;quot;,nbaTeams)

#Player Images
a1=read_html(&#39;http://www.espn.com/nba/depth&#39;)%&amp;gt;%html_nodes(css = &#39;#my-teams-table a&#39;)
a2=a1%&amp;gt;%html_attr(&#39;href&#39;)
a3=a1%&amp;gt;%html_text()
team_table=read_html(&#39;http://www.espn.com/nba/depth&#39;)%&amp;gt;%html_table()
team_table=team_table[[1]][-c(1,2),]
playerTable=team_table%&amp;gt;%melt(,id=&#39;X1&#39;)%&amp;gt;%arrange(X1,variable)
playerName=a2[grepl(&#39;[0-9]&#39;,a2)]
playerId=do.call(&#39;rbind&#39;,lapply(strsplit(playerName,&#39;[/]&#39;),function(x) x[c(8,9)]))
playerId=playerId[playerId[,1]!=&#39;phi&#39;,]
playerTable$img=sprintf(&#39;http://a.espncdn.com/combiner/i?img=/i/headshots/nba/players/full/%s.png&amp;amp;w=350&amp;amp;h=254&#39;,playerId[,1])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;simple-carousel&#34;&gt;Simple carousel&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start easy: show the team logos one at a time with dots underneath&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slickR(obj = teamImg,slideId = &#39;ex1&#39;,height = 100,width=&#39;100%&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/slickR/master/Miscellaneous/blogPost/ex1.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;grouped-images&#34;&gt;Grouped Images&lt;/h2&gt;

&lt;p&gt;There are players on each team, so lets group the starting five together and have each dot correspond with a team:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slickR(
  obj = playerTable$img,
  slideId = c(&#39;ex2&#39;),
  slickOpts = list(
    initialSlide = 0,
    slidesToShow = 5,
    slidesToScroll = 5,
    focusOnSelect = T,
    dots = T
  ),
  height = 100,width=&#39;100%&#39;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/slickR/master/Miscellaneous/blogPost/ex2.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;replacing-the-dots&#34;&gt;Replacing the dots&lt;/h2&gt;

&lt;p&gt;Sometimes the dots won&amp;rsquo;t be informative enough so we can switch them with an HTML object, such as text or other images. We can pass to the customPaging argument javascript code using the &lt;code&gt;htmlwidgets::JS&lt;/code&gt; function.&lt;/p&gt;

&lt;h3 id=&#34;replace-dots-with-text&#34;&gt;Replace dots with text&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
cP1=JS(&amp;quot;function(slick,index) {return &#39;&amp;lt;a&amp;gt;&#39;+(index+1)+&#39;&amp;lt;/a&amp;gt;&#39;;}&amp;quot;)

slickR(
  obj = playerTable$img,
  slideId = &#39;ex3&#39;,
  dotObj = teamImg,
  slickOpts = list(
    initialSlide = 0,
    slidesToShow = 5,
    slidesToScroll = 5,
    focusOnSelect = T,
    dots = T,
    customPaging = cP1
  ),
  height=100,width=&#39;100%&#39;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/slickR/master/Miscellaneous/blogPost/ex3.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;replace-dots-with-images&#34;&gt;Replace dots with Images&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
cP2=JS(&amp;quot;function(slick,index) {return &#39;&amp;lt;a&amp;gt;&amp;lt;img src= &#39; + dotObj[index] + &#39;  width=100% height=100%&amp;gt;&amp;lt;/a&amp;gt;&#39;;}&amp;quot;)


#Replace dots with Images
s1 &amp;lt;- slickR(
  obj = playerTable$img,
  dotObj = teamImg,
  slickOpts = list(
    initialSlide = 0,
    slidesToShow = 5,
    slidesToScroll = 5,
    focusOnSelect = T,
    dots = T,
    customPaging = cP2
  ),height = 100,width=&#39;100%&#39;
)

#Putting it all together in one slickR call
s2 &amp;lt;- htmltools::tags$script(
  sprintf(&amp;quot;var dotObj = %s&amp;quot;, 
          jsonlite::toJSON(teamImg))
)

htmltools::browsable(htmltools::tagList(s2, s1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/slickR/master/Miscellaneous/blogPost/ex7.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;plots&#34;&gt;Plots&lt;/h1&gt;

&lt;p&gt;To place plots directly into slickR we use svglite to convert a plot into svg code using xmlSVG and then convert it into a character object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plotsToSVG=list(
  #Standard Plot
    xmlSVG({plot(1:10)},standalone=TRUE),
  #lattice xyplot
    xmlSVG({print(xyplot(x~x,data.frame(x=1:10),type=&amp;quot;l&amp;quot;))},standalone=TRUE),
  #ggplot
    xmlSVG({show(ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+
                   geom_point())},standalone=TRUE), 
  #lattice dotplot
    xmlSVG({print(dotplot(variety ~ yield | site , data = barley, groups = year,
                          key = simpleKey(levels(barley$year), space = &amp;quot;right&amp;quot;),
                          xlab = &amp;quot;Barley Yield (bushels/acre) &amp;quot;,
                          aspect=0.5, layout = c(1,6), ylab=NULL))
            },standalone=TRUE) 
)

#make the plot self contained SVG to pass into slickR 
s.in=sapply(plotsToSVG,function(sv){paste0(&amp;quot;data:image/svg+xml;utf8,&amp;quot;,as.character(sv))})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slickR(s.in,slideId = &#39;ex4&#39;,slickOpts = list(dots=T), height = 200,width = &#39;100%&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/slickR/master/Miscellaneous/blogPost/ex4.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;synching-carousels&#34;&gt;Synching Carousels&lt;/h2&gt;

&lt;p&gt;There are instances when you have many outputs at once and do not want to go through all, so you can combine two carousels one for viewing and one for searching.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slickR(rep(s.in,each=5),slideId = c(&#39;ex5up&#39;,&#39;ex5down&#39;),
       slideIdx = list(1:20,1:20),
       synchSlides = c(&#39;ex5up&#39;,&#39;ex5down&#39;),
       slideType = rep(&#39;img&#39;,4),
       slickOpts = list(list(slidesToShow=1,slidesToScroll=1),
                        list(dots=F,slidesToScroll=1,slidesToShow=5,
                             centerMode=T,focusOnSelect=T)
                        ),
       height=100,width = &#39;100%&#39;
       )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/slickR/master/Miscellaneous/blogPost/ex5.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;iframes&#34;&gt;Iframes&lt;/h1&gt;

&lt;p&gt;Since the carousel can accept any html element we can place iframes in the carousel.&lt;/p&gt;

&lt;p&gt;There are times when you would want to put in different DOMs than an image in slick. Using slideType you can specify which DOM is used in the slides.&lt;/p&gt;

&lt;p&gt;For example lets put the help Rd files from ggplot2 into a slider using the helper function getHelp. (Dont forget to open the output to an browser to view the iframe contents).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geom_filenames=ls(&amp;quot;package:ggplot2&amp;quot;,pattern = &#39;^geom&#39;)

slickR(unlist(lapply(geom_filenames,getHelp,pkg = &#39;ggplot2&#39;)),slideId = &#39;ex6&#39;,slideType = &#39;iframe&#39;,height = &#39;400px&#39;,width=&#39;100%&#39;,slickOpts = list(dots=T,slidesToShow=2,slidesToScroll=2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/slickR/master/Miscellaneous/blogPost/ex6.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;htmlwidgets&#34;&gt;htmlwidgets&lt;/h2&gt;

&lt;p&gt;Finally, we can really leverage R and place self contained htmlwidgets in iframes (like leaflets and plotly) and use them in a carousel. This solves a problem of how to run many htmlwidgets at once outside of Shiny.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(leaflet)
library(plotly)

l &amp;lt;- leaflet() %&amp;gt;% addTiles()
htmlwidgets::saveWidget(l,&#39;leaflet.html&#39;)

p &amp;lt;- iris%&amp;gt;%ggplot(aes(x=Sepal.Length,y=Sepal.Width))+geom_point()
pL= ggplotly(p)
htmlwidgets::saveWidget(pL,&#39;ggplotly.html&#39;)

slickR(c(rep(paste0(readLines(&#39;leaflet.html&#39;),collapse=&#39;\n&#39;),4),
         rep(paste0(readLines(&#39;ggplotly.html&#39;),collapse=&#39;\n&#39;),4)),
       slideId = c(&#39;leaf&#39;,&#39;plot&#39;),
       slideIdx = list(1:4,5:8),
       slideType = rep(&#39;iframe&#39;,2),
       slickOpts = list(list(dots=T,slidesToShow=2,slidesToScroll=2),
                        list(dots=T,slidesToShow=2,slidesToScroll=2)),
       height=&#39;200px&#39;,width=&#39;100%&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/slickR/master/Miscellaneous/Multimedia/gif/slickRnestingWidgets.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;
Jonathan Sidi joined Metrum Research Group in 2016 after working for several years on problems in applied statistics, financial stress testing and economic forecasting in both industrial and academic settings.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
To learn more about additional open-source software packages developed by Metrum Research Group please visit the Metrum &lt;a href=&#34;https://www.metrumrg.com/try-open-source-tools/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
Contact: For questions and comments, feel free to email me at: yonis@metrumrg.com or open an issue in &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/issues&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(post originally published on &lt;a href=&#34;http://r-posts.com/slickr/&#34;&gt;r-posts&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>