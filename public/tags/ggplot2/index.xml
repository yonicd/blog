<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ggplot2 on Reproducible Random Thoughts</title>
    <link>/tags/ggplot2/</link>
    <description>Recent content in Ggplot2 on Reproducible Random Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>yonicd@gmail.com (Jonathan Sidi)</managingEditor>
    <webMaster>yonicd@gmail.com (Jonathan Sidi)</webMaster>
    <lastBuildDate>Tue, 26 Sep 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is the appropriate population scaling of the Affordable Care Act Funding?</title>
      <link>/post/2017-09-26-aca/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-09-26-aca/</guid>
      <description>

&lt;p&gt;I have been trying to decipher for myself, what is in the current (well, yesterday&amp;rsquo;s) Graham-Cassidy health care bill. I saw this image on many news outlets a few days ago and my inner hate for pie charts bubbled up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/ACA_pie_full.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a zoom in on the pie chart &amp;hellip; From what I can gather, these figures are attempting to say that there are specific states that are getting relatively more of the federal health care funds under the Afordable Care Act (ACA) than their relative state population. Among the many things that are really hard to do with pie charts , comparing distributions ranks pretty high up there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/ACA_pie.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It is common practice when comparing different geographical areas that have different populations levels to scale it using the rate per person (per capita) or per number of people, e.g. rate per 1,000 people. In this case it would be population adjusted state federal funding. The question that needs answering, what is the relevant population.&lt;/p&gt;

&lt;p&gt;Many charts in the last week have scaled the funding adjusted to state population (as is alluded to in the figure above), but the funds are not actually being used by everyone in each state, most people have health care from their employer. So, what is the actual population that is being serviced by the federal funding for the ACA? How much of a different picture does that paint from the original figure?&lt;/p&gt;

&lt;p&gt;Hopefully this post will help motivate readers to start looking around for more data on what is the effect of the proposed bill on the approprations of federal funds on the state level.&lt;/p&gt;

&lt;p&gt;My sources of information is the Kaiser Family Foundation site that have a great database for data on the ACA and the proposed bill, and Wikipedia for auxilary population data. We will end up with the following figure, but along the way I learned a number of things that I didn&amp;rsquo;t know from reading online and seeing the news on TV.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-17-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;A quick note before you proceed - This is not meant to be an all encompassing analysis of the predicted effects of the Graham-Cassidy bill, as it has been said before: &amp;ldquo;Healthcare is hard&amp;hellip;&amp;rdquo;, and if I made any bad assumptions I apologize in advanced and welcome any comments and suggestions to better understand the subject matter.&lt;/p&gt;

&lt;p&gt;Saying that, let&amp;rsquo;s continue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(xml2)
library(rvest)
library(dplyr)
library(ggplot2)
library(geofacet)
knitr::opts_chunk$set(fig.height=7,fig.width=12,warning=FALSE,message=FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scraping-the-relevant-information&#34;&gt;Scraping the relevant information&lt;/h2&gt;

&lt;h3 id=&#34;kaiser-family-foundation&#34;&gt;Kaiser Family Foundation&lt;/h3&gt;

&lt;h4 id=&#34;aca-and-graham-cassidy-federal-spending-by-state&#34;&gt;ACA and Graham-Cassidy federal spending by state.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;kf_spending &amp;lt;- (xml2::read_html(&#39;http://www.kff.org/health-reform/issue-brief/state-by-state-estimates-of-changes-in-federal-spending-on-health-care-under-the-graham-cassidy-bill/&#39;)%&amp;gt;%
  rvest::html_table())[[2]][-c(1,2,3,55),]

names(kf_spending) &amp;lt;- c(&#39;Location&#39;,&#39;ACA&#39;,&#39;GC&#39;,&#39;DIFF&#39;,&#39;PCT&#39;)

kf_spending$Location[which(kf_spending$Location==&#39;DC&#39;)]=&#39;District of Columbia&#39;

kf_spending &amp;lt;- kf_spending%&amp;gt;%mutate_at(.vars=vars(ACA,GC,DIFF,PCT),.funs=funs(as.numeric(gsub(&#39;[,%]&#39;,&#39;&#39;,.))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;aca-medicare-expansion-by-state&#34;&gt;ACA medicare expansion by state&lt;/h4&gt;

&lt;p&gt;The decision of each state to accept medicare expansion will have a large affect on the net affect of GC on the redistribution of federal funds. States that did not accept medicare expansion are expected to have a net positive increase of federal funds.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#http://www.kff.org/health-reform/state-indicator/state-activity-around-expanding-medicaid-under-the-affordable-care-act/?currentTimeframe=0&amp;amp;sortModel=%7B%22colId%22:%22Location%22,%22sort%22:%22asc%22%7D
kf_expansion &amp;lt;- read.csv(&#39;data/kf_expansion.csv&#39;,stringsAsFactors = FALSE,skip = 2)
kf_expansion &amp;lt;- kf_expansion[-c(1,53:61),-3]
names(kf_expansion)[2] &amp;lt;- &#39;Expansion&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;population-of-aca-enrollment-by-state&#34;&gt;Population of ACA enrollment by state.&lt;/h4&gt;

&lt;p&gt;The target population that will be used to scale the federal funds is the total marketplace enrollment for each state. We also add the characteristic of type of marketplace applied in the state to check if that has any effect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Federally-Facilitated Market&lt;/li&gt;
&lt;li&gt;State-based Marketplace&lt;/li&gt;
&lt;li&gt;State-based Marketplace (using HealthCare.gov)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#http://www.kff.org/health-reform/state-indicator/total-marketplace-enrollment/?currentTimeframe=0&amp;amp;sortModel=%7B%22colId%22:%22Total%20Individuals%20Who%20Have%20Selected%20a%20Marketplace%20Plan%22,%22sort%22:%22asc%22%7D
kf_marketplace_pop &amp;lt;- read.csv(&#39;data/kf_marketplace_pop.csv&#39;,stringsAsFactors = FALSE,skip = 2)
kf_marketplace_pop &amp;lt;- kf_marketplace_pop[-c(1,53:59),]
names(kf_marketplace_pop)[c(2,3)] &amp;lt;- c(&#39;Marketplace_Type&#39;,&#39;N&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wikipedia&#34;&gt;Wikipedia&lt;/h3&gt;

&lt;h4 id=&#34;state-characteristics-2016-elections-and-general-population&#34;&gt;State characteristics (2016 elections and general population)&lt;/h4&gt;

&lt;p&gt;To gather more characteristics of each state are the 2016 general election results and the total population in each state, so the prevalent scaling can be used as a comparison.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wiki_elections &amp;lt;- (xml2::read_html(&#39;https://en.wikipedia.org/wiki/United_States_presidential_election,_2016&#39;)%&amp;gt;%
        rvest::xml_nodes(xpath=&#39;//*[@id=&amp;quot;mw-content-text&amp;quot;]/div/div[40]/table&#39;)%&amp;gt;%
        rvest::html_table())[[1]][-c(1,58),c(1,3,6,23)]

names(wiki_elections) &amp;lt;- c(&#39;Location&#39;,&#39;Clinton&#39;,&#39;Trump&#39;,&#39;Total&#39;)

wiki_elections$Location[grep(&#39;^Nebraska&#39;,wiki_elections$Location)] &amp;lt;- &#39;Nebraska&#39;
wiki_elections$Location[grep(&#39;^Maine&#39;,wiki_elections$Location)] &amp;lt;- &#39;Maine&#39;

wiki_elections &amp;lt;- wiki_elections%&amp;gt;%
  mutate_at(.vars = vars(Clinton,Trump,Total),.funs=funs(as.numeric(gsub(&#39;[,]&#39;,&#39;&#39;,.))))%&amp;gt;%
  group_by(Location)%&amp;gt;%summarise_at(.vars = vars(Clinton,Trump,Total),.funs = funs(sum))%&amp;gt;%
  mutate(ClintonPct=Clinton/Total,TrumpPct=Trump/Total,TrumpWin=ifelse(TrumpPct&amp;gt;ClintonPct,&#39;Trump Win&#39;,&#39;Clinton Win&#39;))

wiki_pop &amp;lt;- (xml2::read_html(&#39;https://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population&#39;)%&amp;gt;%
        rvest::xml_nodes(xpath=&#39;//*[@id=&amp;quot;mw-content-text&amp;quot;]/div/table[1]&#39;)%&amp;gt;%
        rvest::html_table())[[1]][-c(30,53:64),c(3,4)]

names(wiki_pop) &amp;lt;- c(&#39;Location&#39;,&#39;Total_N&#39;)

wiki_pop$Total_N &amp;lt;- as.numeric(gsub(&#39;[,]&#39;,&#39;&#39;,wiki_pop$Total_N))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;join-all-the-data-sets&#34;&gt;Join all the data sets&lt;/h3&gt;

&lt;p&gt;We join all the information and create a new variable - the change in federal funds from ACA to GC. This is done for the rate per 1,000 individuals who have selected a market based plan and the broader per 1,000 individuals state total. The former assumes that this the more consice defition of the population better reflects what is the population serviced by the federal funding, and that it is the potential population that would be serviced by the GC bill.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;kf &amp;lt;- kf_marketplace_pop%&amp;gt;%
  left_join(kf_expansion,by=&#39;Location&#39;)%&amp;gt;%
  left_join(wiki_pop,by=&#39;Location&#39;)

kf &amp;lt;- kf_spending%&amp;gt;%left_join(kf, by = c(&#39;Location&#39;))%&amp;gt;%
  mutate(ratio_ACA=1000*ACA/N,ratio_GC=1000*GC/N,ratio_DIFF = ratio_GC-ratio_ACA,
         tot_ratio_ACA=1000*ACA/Total_N,tot_ratio_GC=1000*GC/Total_N,tot_ratio_DIFF = tot_ratio_GC-tot_ratio_ACA)%&amp;gt;%
  arrange(desc(ratio_DIFF))

kf &amp;lt;- kf%&amp;gt;%left_join(wiki_elections,by=&#39;Location&#39;)

kf$Expansion &amp;lt;- sprintf(&#39;Medicaid Expansion %s&#39;,kf$Expansion)

kf$Location &amp;lt;- factor(kf$Location,levels = kf$Location)

kf$Marketplace_Type &amp;lt;- factor(kf$Marketplace_Type,labels=c(&#39;Federally-Facilitated Market&#39;,&#39;State-based Marketplace&#39;,&#39;State-based Marketplace (using HealthCare.gov)&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;plots&#34;&gt;Plots&lt;/h2&gt;

&lt;h3 id=&#34;percent-of-state-population-enrolled-in-aca&#34;&gt;Percent of state population enrolled in ACA&lt;/h3&gt;

&lt;p&gt;First we want to see what is the scope of the population in each state that have selected an ACA market based plan. (note California&amp;hellip; not quite 12% of the US population)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;kf%&amp;gt;%
  mutate(pop_pct=100*N/Total_N)%&amp;gt;%
  arrange(desc(pop_pct))%&amp;gt;%
  mutate(Location=factor(Location,levels=Location))%&amp;gt;%
  ggplot(aes(x=Location,y=pop_pct))+
  geom_point()+
  coord_flip()+
  labs(y=&#39;Percent of Population that have selected an ACA market based plan&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-7-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;overall-distribution-by-medicare-expansion&#34;&gt;Overall distribution by Medicare Expansion&lt;/h3&gt;

&lt;p&gt;We then check that there really is a difference between states that expanded and did not expand medicaid under the ACA and if being a state that voted Republican compared to Democratic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_dat &amp;lt;- kf%&amp;gt;%
  dplyr::select(Expansion,Marketplace_Type,TrumpWin, ratio_DIFF,tot_ratio_DIFF)%&amp;gt;%
  reshape2::melt(.,id=c(&#39;Marketplace_Type&#39;,&#39;Expansion&#39;,&#39;TrumpWin&#39;))

levels(boxplot_dat$variable) &amp;lt;- c(&#39;per 1,000 Individuals who have\nselected a market based plan&#39;,&#39;per 1,000 Individuals&#39;)

  boxplot_dat%&amp;gt;%
    ggplot(aes(x=Expansion,
             y=value,
             fill=TrumpWin))+
  geom_boxplot()+
  geom_hline(aes(yintercept=0),linetype=2)+
  facet_wrap(~variable,ncol=1,scales=&#39;free_y&#39;)+
  labs(title=&#39;Change in Federal Funds ACA vs Graham-Cassidy, 2020-2026&#39;,
         y=&#39;Change in Federal Funds ($ Millions) per 1,000 individuals&#39;)+
  theme_bw()+
  theme(legend.position = &#39;bottom&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-8-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;Drilling down to state level figures we show for each state the change from ACA funding to the proposed GC funding per 1,000 persons who selected a market based ACA plan. The arrows move from ACA to GC funding and the y-axis is ordered by the increasing net difference. This comparison is faceted among the different characteristics scrapped from above.&lt;/p&gt;

&lt;p&gt;Some things to look for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New York has the largest negative net funding per 1,000 persons.&lt;/li&gt;
&lt;li&gt;Kentucky has the largest negative net funding per 1,000 persons among Republican leaning states.&lt;/li&gt;
&lt;li&gt;The net increase in funding per 1,000 persons for states that did not expand medicaid is mostly minimal.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- kf%&amp;gt;%ggplot(aes(x=Location,xend=Location,yend=ratio_GC,y=ratio_ACA,colour=ratio_DIFF))+
  geom_segment(arrow = arrow(length = unit(0.02, &amp;quot;npc&amp;quot;)))+
  coord_flip()+
  scale_colour_gradient(low = &#39;red&#39;,high = &#39;blue&#39;,name=&#39;Difference&#39;)+
  labs(title=&#39;Change in Federal Funds per 1,000 Individuals who have\nselected a market based plan ACA vs Graham-Cassidy, 2020-2026&#39;,
       subtitle=&#39;Arrow pointing to movement from ACA to Graham-Cassidy&#39;,
       caption=&#39;Source: Kaiser Family Foundation&#39;,
       y=&#39;Federal Funds ($ Millions) per 1,000 individuals who have selected a market based plan&#39;)+
  theme_bw()+
  theme(legend.position = &#39;bottom&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;policial-leaning&#34;&gt;Policial Leaning&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ TrumpWin , scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-10-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;aca-medicare-expansion&#34;&gt;ACA Medicare expansion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ Expansion , scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-11-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;aca-medicare-expansion-and-political-leaning&#34;&gt;ACA Medicare expansion and Political Leaning&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ Expansion + TrumpWin , scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-12-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;state-marketplace-type&#34;&gt;State Marketplace Type&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ Marketplace_Type, scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-13-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;aca-medicare-expansion-and-state-marketplace-type&#34;&gt;ACA Medicare expansion and State Marketplace Type&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + facet_wrap(~ Expansion + Marketplace_Type , scales=&#39;free_y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-14-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h3 id=&#34;geofaceting&#34;&gt;Geofaceting&lt;/h3&gt;

&lt;p&gt;Lastly, we construct geographic representation of the difference between the ACA and the GC bill using &lt;a href=&#34;https://twitter.com/hafenstats&#34;&gt;Ryan Hafen&amp;rsquo;s&lt;/a&gt;  &lt;a href=&#34;https://CRAN.R-project.org/package=geofacet&#34;&gt;geofacet&lt;/a&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;states_facet &amp;lt;- state_ranks%&amp;gt;%left_join(kf%&amp;gt;%rename(name=Location),by=&#39;name&#39;)

states_facet$Expansion &amp;lt;- factor(states_facet$Expansion,labels=c(&#39;Expansion&#39;,&#39;No Expansion&#39;))

states_facet$tile_lbl &amp;lt;- sprintf(&#39;%s\n%s&#39;,states_facet$Expansion,states_facet$TrumpWin)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;total-state-population&#34;&gt;Total State Population&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;states_facet%&amp;gt;%
  ggplot(aes(x=&#39;1&#39;, y=&#39;1&#39;,fill=tot_ratio_DIFF)) +
  geom_tile() +
  geom_text(aes(label=tile_lbl),size=2)+
  theme_bw() +
  facet_geo( ~ state)+
  scale_fill_gradient2(low=&#39;red&#39;,mid=&#39;white&#39;,high=&#39;green&#39;,name=&#39;Difference&#39;) +
  theme(legend.position = &#39;bottom&#39;,
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank())+
  labs(title=&#39;Change in Federal Funds per 1,000 Individuals, 2020-2026&#39;,
       caption=&#39;Source: Kaiser Family Foundation&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-16-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h4 id=&#34;aca-enrollment-population&#34;&gt;ACA enrollment population&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;states_facet%&amp;gt;%
  ggplot(aes(x=&#39;1&#39;, y=&#39;1&#39;,fill=ratio_DIFF)) +
  geom_tile() +
  geom_text(aes(label=tile_lbl),size=2)+
  theme_bw() +
  facet_geo( ~ state)+
  scale_fill_gradient2(low=&#39;red&#39;,mid=&#39;white&#39;,high=&#39;green&#39;,name=&#39;Difference&#39;) +
  theme(legend.position = &#39;bottom&#39;,
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank())+
  labs(title=&#39;Change in Federal Funds per 1,000 Individuals who have\nselected a market based plan ACA vs Graham-Cassidy, 2020-2026&#39;,
       caption=&#39;Source: Kaiser Family Foundation&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonicd/yonicd.github.io/master/img/aca/unnamed-chunk-17-1.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggedit 0.2.0</title>
      <link>/post/2017-03-31-ggedit_cranpost/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-03-31-ggedit_cranpost/</guid>
      <description>

&lt;p&gt;We are pleased to announce the release of the ggedit package on &lt;a href=&#34;https://cran.r-project.org/web/packages/ggedit/index.html&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install the package you can call the standard R command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&#39;ggedit&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The source version is still tracked on &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit&#34;&gt;github&lt;/a&gt;, which has been reorganized to be easier to navigate.&lt;/p&gt;

&lt;p&gt;To install the dev version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devtools::install_github(&#39;metrumresearchgroup/ggedit&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-is-ggedit&#34;&gt;What is ggedit?&lt;/h3&gt;

&lt;p&gt;ggedit is an R package that is used to facilitate ggplot formatting. With ggedit, R users of all experience levels can easily move from creating ggplots to refining aesthetic details, all while maintaining portability for further reproducible research and collaboration.&lt;/p&gt;

&lt;p&gt;ggedit is run from an R console or as a reactive object in any Shiny application. The user inputs a ggplot object or a list of objects. The application populates Bootstrap modals with all of the elements found in each layer, scale, and theme of the ggplot objects. The user can then edit these elements and interact with the plot as changes occur. During editing, a comparison of the script is logged, which can be directly copied and shared. The application output is a nested list containing the edited layers, scales, and themes in both object and script form, so you can apply the edited objects independent of the original plot using regular ggplot2 grammar.&lt;/p&gt;

&lt;p&gt;Why does it matter? ggedit promotes efficient collaboration. You can share your plots with team members to make formatting changes, and they can then send any objects they’ve edited back to you for implementation. No more email chains to change a circle to a triangle!&lt;/p&gt;

&lt;h3 id=&#34;updates-in-ggedit-0-2-0&#34;&gt;Updates in ggedit 0.2.0:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The layer modal (popups) elements have been reorganized for less clutter and easier navigation.&lt;/li&gt;
&lt;li&gt;The S3 method written to plot and compare themes has been removed from the package, but can still be found on the repo, see &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/blob/master/Miscellaneous/Utilities/plot.theme.R&#34;&gt;plot.theme&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;deploying&#34;&gt;Deploying&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- call from the console: `ggedit(p)`
- call from the addin toolbar: highlight script of a plot object on the source editor window of RStudio and run from toolbar.
- call as part of Shiny: use the Shiny module syntax to call the ggEdit UI elements.
    - server: `callModule(ggEdit,&#39;pUI&#39;,obj=reactive(p))`
    - ui: `ggEditUI(&#39;pUI&#39;)`
- if you have installed the package you can see an example of a Shiny app by executing `runApp(system.file(&#39;examples/shinyModule.R&#39;,package = &#39;ggedit&#39;))`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;outputs&#34;&gt;Outputs&lt;/h3&gt;

&lt;p&gt;ggedit returns a list containing 8 elements either to the global enviroment or as a reactive output in Shiny.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;updatedPlots

&lt;ul&gt;
&lt;li&gt;List containing updated ggplot objects&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayers

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated layers (ggproto) objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayersElements

&lt;ul&gt;
&lt;li&gt;For each plot a list elements and their values in each layer&lt;/li&gt;
&lt;li&gt;Can be used to update the new values in the original code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayerCalls

&lt;ul&gt;
&lt;li&gt;For each plot a list of scripts that can be run directly from the console to create a layer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedThemes

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated theme objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;li&gt;If the user doesn&amp;rsquo;t edit the theme updatedThemes will not be returned&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedThemeCalls

&lt;ul&gt;
&lt;li&gt;For each plot a list of scripts that can be run directly from the console to create a theme&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedScales

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated scales (ggproto) objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedScaleCalls

&lt;ul&gt;
&lt;li&gt;For each plot a list of scripts that can be run directly from the console to create a scale&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;short-clip-to-use-ggedit-in-shiny&#34;&gt;Short Clip to use ggedit in Shiny&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/embed/pJ1kbd_OVwg&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/pJ1kbd_OVwg/0.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=71aadbe0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;
Jonathan Sidi joined Metrum Research Group in 2016 after working for several years on problems in applied statistics, financial stress testing and economic forecasting in both industrial and academic settings.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
To learn more about additional open-source software packages developed by Metrum Research Group please visit the Metrum &lt;a href=&#34;https://www.metrumrg.com/try-open-source-tools/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
Contact: For questions and comments, feel free to email me at: yonis@metrumrg.com or open an issue in &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/issues&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(post originally published on &lt;a href=&#34;http://r-posts.com/ggedit-0-2-0-is-now-on-cran/&#34;&gt;r-posts&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggedit 0.1.1</title>
      <link>/post/2017-02-22-ggedit3/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2017-02-22-ggedit3/</guid>
      <description>

&lt;p&gt;ggedit is a package that lets users interactively edit ggplot layer and theme aesthetics.  In a previous &lt;a href=&#34;https://yonicd.github.io/2016-12-13-ggedit/&#34;&gt;post&lt;/a&gt; we showed you how to use it in a collaborative workflow using standard R scripts. More importantly, we &lt;a href=&#34;https://www.r-bloggers.com/ggedit-0-0-2-a-gui-for-advanced-editing-of-ggplot2-objects/&#34;&gt;highlighted&lt;/a&gt; that ggedit outputs to the user, after editing, updated: gg plots, layers, scales and themes as both self-contained objects &lt;em&gt;and&lt;/em&gt; script that you can paste directly in your code.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;metrumresearchgroup/ggedit&amp;quot;,subdir=&amp;quot;ggedit&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;version-0-1-1-updates&#34;&gt;version 0.1.1 Updates&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ggEdit Shiny module&lt;/strong&gt;: use ggedit as part of any Shiny application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gglsave&lt;/strong&gt;: generalization of ggsave to save multiple outputs of ggplot to single file and multiple files in a single call to various graphics devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ggedit-shiny-module&#34;&gt;ggEdit Shiny module&lt;/h2&gt;

&lt;p&gt;This post will demonstrate a new method to use ggedit, &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Shiny modules&lt;/a&gt;. A Shiny module is a chunk of Shiny code that can be reused many times in the same application, but generic enough so it can be applied in any Shiny app (in simplest terms think of it as a Shiny function). By making ggedit a Shiny module we can now replace any &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/latest/renderPlot.html&#34;&gt;renderPlot()&lt;/a&gt; call that inputs a ggplot and outputs in the UI &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/latest/plotOutput.html&#34;&gt;plotOutput()&lt;/a&gt;, with an interactive ggedit layout. The analogy between how to use the ggEdit module in comparison to a standard renderPlot call can be seen in the table below.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;standard Shiny&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Shiny Module&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;output$id=renderPlot(p)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;reactiveOutput=callModule(ggEdit,id,reactive(p))&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;UI&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;plotOutput(id)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ggEditUI(id)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;We can see that there are a few differences in the calls. To call a module you need to run a Shiny function  &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/latest/callModule.html&#34;&gt;callModule&lt;/a&gt;, in this case ggEdit. Next, a character id for the elements the module will create in the Shiny environment and finally the arguments that are expected by the module, in this case a reactive object that outputs a ggplot or list of ggplots. This is coupled with ggEditUI, which together create a ggedit environment to edit the plots during a regular Shiny app.&lt;/p&gt;

&lt;p&gt;In addition to the output UI the user also gets a reactive output that has all the objects that are in the regular ggedit package (plots, layers, scales, themes) both in object and script forms. This has great advantages if you want to let users edit plots while keeping track of what they are changing. A realistic example of this would be clients (be it industry or academia) that are shown a set of default plots, with the appropriate data, and then they are given the opportunity to customize according to their specifications. Once they finish editing, the script is automatically saved to the server, updating the clients portfolio with their preferred aesthetics. No more email chains on changing a blue point to an aqua star!&lt;/p&gt;

&lt;p&gt;Below is a small example of a static ggplot using renderPlot/plotOutput and how to call the same plot and a list of plots using ggEdit/ggeditUI. We added a small reactive text output so you can see the real-time changes of the aesthetic editing being returned to the server.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;!---
&lt;a href=&#34;http://www.youtube.com/watch?v=pJ1kbd_OVwg&#34; target=&#34;_blank&#34; &gt;&lt;img src=&#34;http://img.youtube.com/vi/pJ1kbd_OVwg/0.jpg&#34; alt=&#34;ggEdit Shiny module&#34;&gt;&lt;/a&gt;
---&gt;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pJ1kbd_OVwg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;source-code-for-example&#34;&gt;Source Code for example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggedit)

server &amp;lt;- function(input, output,session) {
  p1=ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+geom_point()
  p2=ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+geom_line()+geom_point()
  p3=list(p1=p1,p2=p2)

  output$p&amp;lt;-renderPlot({p1})
  outp1&amp;lt;-callModule(ggEdit,&#39;pOut1&#39;,obj=reactive(list(p1=p1)))
  outp2&amp;lt;-callModule(ggEdit,&#39;pOut2&#39;,obj=reactive(p3))

  output$x1&amp;lt;-renderUI({
    layerTxt=outp1()$UpdatedLayerCalls$p1[[1]]
            aceEditor(outputId = &#39;layerAce&#39;,value=layerTxt,
                      mode = &amp;quot;r&amp;quot;, theme = &amp;quot;chrome&amp;quot;, 
                      height = &amp;quot;100px&amp;quot;, fontSize = 12,wordWrap = T)
         })  
  
  output$x2&amp;lt;-renderUI({
    themeTxt=outp1()$UpdatedThemeCalls$p1
            aceEditor(outputId = &#39;themeAce&#39;,value=themeTxt,
                      mode = &amp;quot;r&amp;quot;, theme = &amp;quot;chrome&amp;quot;, 
                      height = &amp;quot;100px&amp;quot;, fontSize = 12,wordWrap = T)
  })  

}

ui &amp;lt;-fluidPage(
  conditionalPanel(&amp;quot;input.tbPanel==&#39;tab2&#39;&amp;quot;,
  sidebarPanel(uiOutput(&#39;x1&#39;),uiOutput(&#39;x2&#39;))),
  mainPanel(
    tabsetPanel(id = &#39;tbPanel&#39;,
      tabPanel(&#39;renderPlot/plotOutput&#39;,value = &#39;tab1&#39;,plotOutput(&#39;p&#39;)),
      tabPanel(&#39;ggEdit/ggEditUI&#39;,value = &#39;tab2&#39;,ggEditUI(&amp;quot;pOut1&amp;quot;)),
      tabPanel(&#39;ggEdit/ggEditUI with lists of plots&#39;,value = &#39;tab3&#39;,ggEditUI(&amp;quot;pOut2&amp;quot;))
      )
    )
  )


shinyApp(ui, server)

&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;
Jonathan Sidi joined Metrum Research Group in 2016 after working for several years on problems in applied statistics, financial stress testing and economic forecasting in both industrial and academic settings.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
To learn more about additional open-source software packages developed by Metrum Research Group please visit the Metrum &lt;a href=&#34;https://www.metrumrg.com/try-open-source-tools/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
Contact: For questions and comments, feel free to email me at: yonis@metrumrg.com or open an issue in &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/issues&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(post originally published on &lt;a href=&#34;http://r-posts.com/ggedit-0-1-1-shiny-module-to-interactvely-edit-ggplots-within-shiny-applications/&#34;&gt;r-posts&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggedit</title>
      <link>/post/2016-12-13-ggedit/</link>
      <pubDate>Tue, 13 Dec 2016 00:00:00 +0000</pubDate>
      <author>yonicd@gmail.com (Jonathan Sidi)</author>
      <guid>/post/2016-12-13-ggedit/</guid>
      <description>

&lt;p&gt;ggplot2 has become the standard of plotting in R for many users. New users, however, may find the learning curve steep at first, and more experienced users may find it challenging to keep track of all the options (especially in the theme!).&lt;/p&gt;

&lt;p&gt;ggedit is a package that helps users bridge the gap between making a plot and getting all of those pesky plot aesthetics just right, all while keeping everything portable for further research and collaboration.&lt;/p&gt;

&lt;p&gt;ggedit is powered by a Shiny gadget where the user inputs a ggplot plot object or a list of ggplot objects. You can run ggedit directly from the console from the Addin menu within RStudio.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;metrumresearchgroup/ggedit&amp;quot;,subdir=&amp;quot;ggedit&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;layers&#34;&gt;Layers&lt;/h2&gt;

&lt;p&gt;The gadget creates a popup window which is populated by the information found in each layer. You can edit the aesthetic values found in a layer and see the changes happen in real time.&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/OvMWCHpCmaI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can edit the aesthetic layers while still preserving the original plot, because the changed layers are cloned from the original plot object and are independent of it. The edited layers are provided in the output as objects, so you can use the layers independent of the plot using regular ggplot2 grammar. This is a great advantage when collaborating with other people, where you can send a plot to team members to edit the layers aesthetics and they can send you back just the new layers for you to implement them.&lt;/p&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;p&gt;ggedit also has a theme editor inside. You can edit any element in the theme and see the changes in real time, making the trial and error process quick and easy. Once you are satisfied with the edited theme you can apply it to other plots in the plot list with one click or even make it the &lt;em&gt;session&lt;/em&gt; theme regardless of the gadget. As with layers, the new theme object is part of the output, making collaboration easy.&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/813QxbsrvLM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;outputs&#34;&gt;Outputs&lt;/h2&gt;

&lt;p&gt;The gadget returns a list containing 4 elements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;updatedPlots

&lt;ul&gt;
&lt;li&gt;List containing updated ggplot objects&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayers

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated layers (ggproto) objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedLayersElements

&lt;ul&gt;
&lt;li&gt;For each plot a list elements and their values in each layer&lt;/li&gt;
&lt;li&gt;Can be used to update the new values in the original code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;updatedThemes

&lt;ul&gt;
&lt;li&gt;For each plot a list of updated theme objects&lt;/li&gt;
&lt;li&gt;Portable object&lt;/li&gt;
&lt;li&gt;If the user doesn&amp;rsquo;t edit the theme updatedThemes will not be returned&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rgg&#34;&gt;rgg&lt;/h2&gt;

&lt;p&gt;After you finish editing the plots the natural progression is to use them in the rest of the script. In ggedit there is the function rgg (remove and replace ggplot). Using this function you can chain into the original code changes to the plot without multiplying script needlessly.&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/0QmJHwoWQWM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;With this function you can&lt;/p&gt;

&lt;p&gt;Specify which layer you want to remove from a plot:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ggObj%&amp;gt;%rgg(&#39;line&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Provide an index to a specific layer, in instances where there are more than one layer of the same type in the plot&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ggObj%&amp;gt;%rgg(&#39;line&#39;,2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remove a layer from ggObj and replace it with a new one from the ggedit output p.out&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ggObj%&amp;gt;%rgg(&#39;line&#39;,newLayer = p.out$UpdatedLayers)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remove a layer and replace it with a new one and the new theme&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ggObj%&amp;gt;%rgg(&#39;line&#39;,newLayer = p.out$UpdatedLayers)+p.out$UpdatedThemes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There is also a plotting function for ggedit objects that creates a grid.view for you and finds the best grid size for the amount of plots you have in the list. And for the exotic layouts you can give specific positions and the rest will be done for you. If you didn&amp;rsquo;t use ggedit, you can still add the class to any ggplot and use the plotting function just the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(as.ggedit(list(p0,p1,p2,p3)),list(list(rows=1,cols=1:3),
                                       list(rows=2,cols=2),
                                       list(rows=2,cols=1),
                                       list(rows=2,cols=3))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;addin-launch&#34;&gt;Addin Launch&lt;/h2&gt;

&lt;p&gt;To launch the Shiny gadget from the addin menu highlight the code that creates the plot object or the plot name in the source pane of Rstudio, then click on the ggedit addin from the Addins the dropdown menu.&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/693XhHt8fug&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;
Jonathan Sidi joined Metrum Research Group in 2016 after working for several years on problems in applied statistics, financial stress testing and economic forecasting in both industrial and academic settings.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
To learn more about additional open-source software packages developed by Metrum Research Group please visit the Metrum &lt;a href=&#34;https://www.metrumrg.com/try-open-source-tools/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
Contact: For questions and comments, feel free to email me at: yonis@metrumrg.com or open an issue in &lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit/issues&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(post originally published on &lt;a href=&#34;https://www.r-statistics.com/2016/11/ggedit-interactive-ggplot-aesthetic-and-theme-editor/&#34;&gt;r-statistics&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>